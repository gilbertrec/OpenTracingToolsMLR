Distributed tracing setup in GKE — Jaeger / Zipkin — Google Cloud Platform
Rajathithan Rajasekar
Rajathithan Rajasekar

May 19, 2020·5 min read





Zipkin & Jaeger
To monitor the stability of the application , we need logging , metrics and tracing. In microservices environment, Logging will help you to get the error details of a service, metrics will get you the abnormal trend of a service, but only tracing will help you pin-point where the service call has actually failed. Let’s see how we can setup opensource distributed tracing software like Jaeger and Zipkin in GKE,
To enable distributed tracing , all the incoming requests to / from microservices should be enabled with trace ids and tags and they should report the traces to a collector. All the services should also forward the headers downstream and the tracer backend like Jaeger or zipkin should be able to query and search these traces.
To ease the instrumentation of the microservices, there are opentracing and opencensus library packages available for major languages like C++, Go , java, javascript, Python , Ruby etc. Opencensus is backed by google and opentracing is backed by CNCF and they have now jointly formed opentelemetry.
For the purpose of this demo i have used the bookinfo sample application , which is available as part of the Istio installation. First let’s create a GKE cluster in us-central1 region, with min nodes as 3.
gcloud container clusters create demo --enable-autoupgrade --enable-autoscaling --min-nodes=2 --max-nodes=10 --num-nodes=3 --zone=$zone
Next we will go ahead and get the credentials for the cluster and create a cluster role binding.
gcloud container clusters get-credentials demo --zone $zone --project $project
kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value core/account)

GKE cluster
We will now download the latest stable version of istio for installation.
curl -L https://istio.io/downloadIstio | sh -
Verify the installation,
cd istio-1.5.4/bin
./istioctl verify-install
Now we will go ahead and deploy the istio ecosystem, as part of the installation it will also install grafana, prometheus, kiali and Jaeger
./istioctl manifest apply --set profile=demo --set values.tracing.enabled=true
If you want to use zipkin as the tracer, use the below command instead of above.
./istioctl manifest apply --set profile=demo --set values.tracing.enabled=true --set values.tracing.provider=zipkin
Next we label the namespace ‘default’ as istio-injection enabled, so all the services deployed will have a istio side-car proxy.
kubectl label namespace default istio-injection=enabled
Now we will deploy the application.
cd istio-1.5.4/
kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
Check whether the pods and services are running as intended,

GKE services
kubectl get services
kubectl get pods
kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}') -c ratings -- curl productpage:9080/productpage | grep -o "<title>.*</title>"
Now we will create the gateway for the application,
kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
Now open up the firewall rules
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
gcloud compute firewall-rules create allow-gateway-http --allow tcp:$INGRESS_PORT
gcloud compute firewall-rules create allow-gateway-https --allow tcp:$SECURE_INGRESS_PORT
To introduce an error and visualize it in Jaeger / Zipkin, we will induce delay fault between the products and reviews service for the user jason, more details are available in the below link
kubectl apply -f samples/bookinfo/networking/virtual-service-ratings-test-delay.yaml
Fault Injection
This task shows you how to inject faults to test the resiliency of your application. Set up Istio by following the…
istio.io


Book Info application
Now lets open the Jaeger ui , by doing a portforward on the jaeger-query service.
kubectl port-forward --namespace istio-system $(kubectl get pod \
--namespace istio-system --selector="app=jaeger" \
--output jsonpath='{.items[0].metadata.name}') \
8080:16686

Google cloud shell — Port forwarding the Jaeger Query Service
Click on web-preview on the cloud shell, Navigate to the error time span to the view the details.

Jaeger UI

Error identification in Jaeger UI
the DAG in Jaeger is given below,

Jaeger DAG
Lets see how we can view this error detail in zipkin, get the credentials of the cluster where you have deployed zipkin as the tracer, then execute the below command to do the port forward of the zipkin service and do a web-preview from the cloud shell.
kubectl port-forward --namespace istio-system $(kubectl get pod \
--namespace istio-system --selector="app=zipkin" \
--output jsonpath='{.items[0].metadata.name}') 8080:9411

Zipkin UI Lens
the DAG graph is displayed as below in zipkin

Zipkin DAG
The different error response flags are given below for your reference, you can use them to troubleshoot the issue.
DC - Downstream connection termination
UH - No healthy upstream hosts.
UF - Upstream connection failure.
UO - Upstream overflow.
NR - No route configured.
URX - Rejected because of upstream retry limit or maximum connection attempts reached.
LH - Local service failed health check request.
UT - Upstream request timeout.
LR - Connection local reset.
UR - Upstream remote reset.
UC - Upstream connection termination.
DI - The request processing was delayed for a period specified via fault injection. 
FI - The request was aborted with a response code specified via fault injection. 
RL - The request was rate limited locally by the rate limiting filter.
UAEX - The request was denied by the external authorization service.
RLSE - The request was rejected because there was an error in rate limit service.
IH - The request was rejected because it set an invalid value for a strictly-checked header in addition to 400 response code.
SI - Stream idle timeout in addition to 408 response code.
Thanks for reading through this post, hope it helped you .