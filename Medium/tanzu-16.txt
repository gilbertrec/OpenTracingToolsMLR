Wordpress and Mysql on TKG+
Ravi Jagannathan
Ravi Jagannathan

Aug 19, 2020·5 min read




on VSphere 7.0 using CNI Storage / Metal LB / Kustomize

PreReq :
TKG cluster on VS7
Large Datastore
TKG cli installed
Management plane created
Summary of steps :
Create a TKG cluster
Prep the Cluster for CSI Storage
Prep the Cluster for Metal LB
Install Kustomize
Download the Deployment / Svc / PVC yaml descriptors
Deploy via Kustomize
First : TKG Cluster create
We start by creating a cluster for our app. You might alternatively choose to create a namespace on a given cluster, but I went ahead and created a Dev cluster for our Wordpress deployment which will host the app all by itself.
tkg create cluster some-cluster -plan=dev
Cluster creation as you see is simple command and TKG cli is the way to initiate it. You can also upgrade / scaleup / delete via the cli.
NOTE: you will log into a cluster to do any more apply / changes. So make sure to do that.
Prep the Cluster for CSI Storage:
Create tags on Datastore by right clicking on the Tags and Custom attributes section and following the steps to add.

Assign the tags with all-storage policy. We could be selective in future.

2. Create VM Policy

At the end validate if you are able to see the policy.

Our policy is showing as “fork8s”
Create Storage Class : Assuming you have logged into the TKG Cluster with Kubectl lets create the Storage Class . Observe the storagepolicyname. It should point to what we created via VCenter.
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
 name: k8s-storagepolicy
 annotations:
 storageclass.kubernetes.io/is-default-class: “true”
provisioner: csi.vsphere.vmware.com
parameters:
 storagepolicyname: “fork8s”
Validate if it got applied
ravij@tkg-gui:~/RAVIDIR/TKG/wordpress$ kubectl get sc
NAME                          PROVISIONER              RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
k8s-storagepolicy (default)   csi.vsphere.vmware.com   Delete          Immediate           false                  7d21h
Create Persistant Volume Claim : Create one for Mysql and another for Wordpress . Here is the one for Mysql. Apply this similarly for Wordpress too.
So you should end up with 2 PVC yamls one for Mysql and other for Wordpress php.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-storagepolicy-pvc
  labels:
    app: wordpress
spec:
  storageClassName: k8s-storagepolicy
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20G
Validate the PVC for Mysql / Wordpress.

These PVC will get used in our Deployment yaml
Prep the Cluster for Metal LB
Now that our TKG cluster is prepped with Storage using CSI plugin, lets get a LB installed which will expose our Wordpress app. We use MetalLB and these steps
kubectl create ns metallb-system
kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.2/manifests/metallb.yaml -n metallb-system
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
Let us configure the MetalLB with the pool of IP from our DHCP / Allocated segment . Here we use the 192.168.178.230 as the starting IP and take next 20 ips.
# cat > metallb-configmap.yaml << EOF
apiVersion: v1
kind: ConfigMap
metadata:
namespace: metallb-system
name: config
data:
config: |
address-pools:
- name: default
protocol: layer2
addresses:
- 192.168.178.230-192.168.178.250
EOF 
Apply the yaml with
kubectl apply -f metallb-configmap.yaml
NOTE: In my case i had the ip scheme as 192.168.178.1 . Modify this range per your network subnet.
Create a Wordpress directory
cd wordpress  { important } 
Install Kustomize
I pretty much curled the binary into this directory and added permissions to run it.
kubernetes-sigs/kustomize/master/hack/install_kustomize.sh” | bash
What is Kustomize ?
kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.
Create Secret { copy this section and paste it on unix/linux/powershell command line as is. It will create a file with contents }
cat <<EOF >./kustomization.yaml
secretGenerator:
- name: mysql-pass
  literals:
  - password=welcome
EOF
NOTE : Change the default password .
Download Mysql and Wordpress app yaml
MYSQL: 
curl -LO https://k8s.io/examples/application/wordpress/mysql-deployment.yaml
WORDPRESS:
curl -LO https://k8s.io/examples/application/wordpress/wordpress-deployment.yaml
Edit the Kustomization to add both Yamls
cat <<EOF >>./kustomization.yaml
resources:
  - mysql-deployment.yaml
  - wordpress-deployment.yaml
EOF
Modify the YML to delete PVC sections.
The downloaded YAML files have section for PVC. We created the required PVC in earlier steps . Delete out the PVC section from this YAML for both MYSQL and WORDPRESS yamls.
Deploy app the TKG cluster
NOTE: Cd out of the wordpress directory and apply the files in it. At this point you should have the secret kustomization file and the mysql and wordpress yaml files. Make sure to delete the PVC sections in theyaml and apply it.
kubectl apply -k ./
kubectl get po 
Get the LB IP address
kubectl get svc 
NAME      TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)
wordpress LoadBalancer  100.71.130.121  192.168.3.231 80:32024/TCP
The Ip 192.168.3.231 was allocated from the Metal LB pools. To get to the Wordpress app open this ip on a browser.
It will open into a WordPress set up page where you enter config. After a few next steps, it should allow you to create a Post.