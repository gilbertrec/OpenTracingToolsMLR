Jaeger and Zipkin integration in OpenTracing World
Tony Tony
Tony Tony

Oct 12, 2019·2 min read




Introduction
In this article, I would like to go through with you about how to view traces from both Jaeger and Zipkin as a single view. You might be thinking that it should be just fine to stick to one of the other. However, with the increasing use of Microservices style architecture, choose of tracers is becoming independent.
Jaeger and Zipkin support OpenTracing specification and each tracer works independently based on their own Propagation format implementation — Jaeger and Zipkin B3.
System Architecture
Figure 1. Architecture to illustrate the use case
Using the simple diagram above, you could see that each of the system is behaving independently and hence for this use case, I choose different tracer as well to present the practical problem which we could be facing in the real world.
Solution
Fortunately, we could integrate these two tracers nicely and elegantly. Jaeger has provided quite a flexible way of working with Zipkin, which you can checkout on the Github Jaeger-Zipkin. So, we can configure Jaeger to use Zipkin’s Propagation format — B3 Propagation.
fun initTracer() {
    val samplerConfig = SamplerConfiguration().withType("const").withParam(1)
    val reporterConfig = ReporterConfiguration()
        .withLogSpans(true)
    val codecConfig = CodecConfiguration().withPropagation(Propagation.B3)
    val tracer = Configuration("componentSvcA")
        .withCodec(codecConfig)
        .withSampler(samplerConfig)
        .withReporter(reporterConfig)
        .withTraceId128Bit(true)
        .tracer
    GlobalTracer.registerIfAbsent { tracer }
}
Source code is available on Github Jaeger-Zipkin-Sample. The sample code is using OpenTracing Java Annotation library (article can be found on below).
OpenTracing Annotation
OpenTracing provides annotation driven based such as @Traced. The annotation is very simple concept which makes very…
medium.com

Result
Once we configured Jaeger to use B3 Propagation format, the traces are in a single view as we expected to be.