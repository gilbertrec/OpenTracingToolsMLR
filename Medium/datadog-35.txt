Deploy Datadog Agents With Puppet Bolt
Martez Reed
Martez Reed

Jul 22, 2020·5 min read




Datadog is a monitoring service for monitoring servers, databases, tools, and services. This post covers using Puppet Bolt to install Datadog agents.
Initialize a New Bolt Project
Ensure that the latest version of Puppet Bolt is installed before getting started.
Puppet Bolt utilizes Project directories as launching points for running Bolt operations. In this post we’ll create a Bolt project for deploying a Datadog agent. The following command will create a directory named datadog in the current working directory and install the datadog_agent forge module along with the necessary module dependencies.
bolt project init datadog --modules datadog-datadog_agent
The command should generate output similar to that shown below if it ran successfully.
Successfully created Bolt project at /system/path/datadog
Successfully created Puppetfile at /system/path/datadog/Puppetfile
Successfully synced modules from /system/path/datadog/Puppetfile to /system/path/datadog/modules
Successfully installed datadog-datadog_agent
There should now be a bolt.yaml file in the datadog directory. In the datadog project directory create a file named bolt-project.yaml with the following content.
# bolt-project.yaml
name: datadog
Deploy the Datadog Agent
With the Datadog agent module installed all we need to do now is instantiate the module by creating a Bolt plan to run.
Encrypt Datadog API Key
In order for our Datadog agent to connect to the Datadog service an API key is required and should be protected. We’ll need Puppet Bolt to be able to access the API key but we don’t want it to be stored in plaintext so we’ll use hiera-eyaml to encrypt the data.
Install Hiera-Eyaml Gem
Hiera-Eyaml is a library commonly used by Puppet for encrypting sensitive data. It doesn’t ship with Puppet Bolt so we’ll need to install it first. Run the following command to install the hiera-eyaml gem.
/opt/puppetlabs/bolt/bin/gem install --user-install hiera-eyaml
The command should have generated output similar to that shown below.
Fetching: hiera-eyaml-3.2.0.gem (100%)
Successfully installed hiera-eyaml-3.2.0
Parsing documentation for hiera-eyaml-3.2.0
Installing ri documentation for hiera-eyaml-3.2.0
Done installing documentation for hiera-eyaml after 1 seconds
1 gem installed
Now that hiera-eyaml is installed we need to generate a key pair for the encryption and decryption process. Run the following command to generate a new key pair.
/opt/puppetlabs//bolt/bin/eyaml createkeys
The command should have generated output similar to that shown below. The key pair is by default stored in a keys directory in the current working directory that the command was run in.
[hiera-eyaml-core] Created key directory: ./keys
[hiera-eyaml-core] Keys created OK
Setup Hiera
Hiera is a built-in key-value configuration data lookup system. This allows us to use a robust lookup system for defining parameters in our Bolt code. In addition to yaml files we can use external systems such as a CMDB to provide data to our Bolt code.
Create a hiera.yaml file in the datadog directory with the content below. The hiera configuration defines where and how to find the encrypted API key.
---
version: 5
defaults:
  datadir: data
hierarchy:
  - name: "Secret data"
    lookup_key: eyaml_lookup_key # eyaml backend
    paths:
      - "common.eyaml"
    options:
      pkcs7_private_key: './keys/private_key.pkcs7.pem'
      pkcs7_public_key: './keys/public_key.pkcs7.pem'
Create a directory named data to store our hiera data files as specified in the hiera configuration file.
mkdir data
Encrypt the Datadog API key using hiera-eyaml by running the following command and replacing the value after -s with your API key.
/opt/puppetlabs//bolt/bin/eyaml encrypt -s be2qe2676543375deqde8e9fa28424343
The command should have generated output similar to that shown below.
string: ENC[PKCS7,MIIBmQYJKoZIhvcNAQcDoIIBijCCAYYCAQAxggEhMIIBHQIBADAFMAACAQEwDQYJKoZIhvcNAQEBBQAEggEASCIWgU8lnyfMSSKIb1Nj/OScH+gJZ2FVc6JWeA1lilAIijyyHNByuswMkZoB+9+Q35MEiRbLLSkmhwchtbmHMe/51AcfF7RxHG0KImoESM9VLPN7juX5wJDIsD7KAbIRAC1OeLUTnk1kS2kHEjuOLA1FU/hnKMFu8Yyy/eXClD+gaXwiryUuCDjiIui6ht28xzEe0H+2RTugggdkdIMvdsUEHSFvAT/oW35ZMTQdway5XF0ro80y/lA0nT2S7DtHPvu/Sy05009Ei/La4MVNlDBln3x8gRk0v/mMsUoiGCs7ZYTOycYYq0LPiNHKIIGrfGrp397ef5zKOKySCryaBTBcBgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBAXv0fhfFThA4j/YN/yJ/4agDC5UW4hNla4JeAZQJyLNqHx9mGJydHQUuYiLOmxW7Sz1P4X2mWlwpsEHplWWEoWBd8=]
OR
block: >
    ENC[PKCS7,MIIBmQYJKoZIhvcNAQcDoIIBijCCAYYCAQAxggEhMIIBHQIBADAFMAACAQEw
    DQYJKoZIhvcNAQEBBQAEggEASCIWgU8lnyfMSSKIb1Nj/OScH+gJZ2FVc6JW
    eA1lilAIijyyHNByuswMkZoB+9+Q35MEiRbLLSkmhwchtbmHMe/51AcfF7Rx
    HG0KImoESM9VLPN7juX5wJDIsD7KAbIRAC1OeLUTnk1kS2kHEjuOLA1FU/hn
    KMFu8Yyy/eXClD+gaXwiryUuCDjiIui6ht28xzEe0H+2RTugggdkdIMvdsUE
    HSFvAT/oW35ZMTQdway5XF0ro80y/lA0nT2S7DtHPvu/Sy05009Ei/La4MVN
    lDBln3x8gRk0v/mMsUoiGCs7ZYTOycYYq0LPiNHKIIGrfGrp397ef5zKOKyS
    CryaBTBcBgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBAXv0fhfFThA4j/YN/y
    J/4agDC5UW4hNla4JeAZQJyLNqHx9mGJydHQUuYiLOmxW7Sz1P4X2mWlwpsE
    HplWWEoWBd8=]
Create a file named common.eyaml in the data directory created in a previous step. The file should include an entry for the datadog_agent::api_key and its value should be the block output format generated from the encryption command.
---
datadog_agent::api_key: >
    ENC[PKCS7,MIIBmQYJKoZIhvcNAQcDoIIBijCCAYYCAQAxggEhMIIBHQIBADAFMAACAQEw
    DQYJKoZIhvcNAQEBBQAEggEASCIWgU8lnyfMSSKIb1Nj/OScH+gJZ2FVc6JW
    eA1lilAIijyyHNByuswMkZoB+9+Q35MEiRbLLSkmhwchtbmHMe/51AcfF7Rx
    HG0KImoESM9VLPN7juX5wJDIsD7KAbIRAC1OeLUTnk1kS2kHEjuOLA1FU/hn
    KMFu8Yyy/eXClD+gaXwiryUuCDjiIui6ht28xzEe0H+2RTugggdkdIMvdsUE
    HSFvAT/oW35ZMTQdway5XF0ro80y/lA0nT2S7DtHPvu/Sy05009Ei/La4MVN
    lDBln3x8gRk0v/mMsUoiGCs7ZYTOycYYq0LPiNHKIIGrfGrp397ef5zKOKyS
    CryaBTBcBgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBAXv0fhfFThA4j/YN/y
    J/4agDC5UW4hNla4JeAZQJyLNqHx9mGJydHQUuYiLOmxW7Sz1P4X2mWlwpsE
    HplWWEoWBd8=]
Create a Datadog Install Plan
Now that hiera has been configured and the api key has been encrypted, we’re ready to create a plans directory in the project directory.
mkdir plans
Create a plan named install.pp in the plans directory with the following content. The following plan preps the remote system with a Puppet agent and installs the DataDog agent. The module requires that an api key is provided but instead of specifying it in the plan an automatic parameter lookup is performed to our hiera common.eyaml file for the value.
plan datadog::install(
  TargetSpec $targets,
  ) {
      $targets.apply_prep
      apply($targets) {
        class { "datadog_agent":
          datadog_site => "datadoghq.com",
          agent_major_version => 7,
        }
   }
}
We can now verify that Bolt recognizes our new plan by running the following command that lists registered Bolt plans.
bolt plan show
If the plan registers properly the output should include a datadog::install entry.
aggregate::count
aggregate::nodes
aggregate::targets
canary
datadog::install
facts
facts::info
puppetdb_fact
reboot
terraform::apply
terraform::destroy
Run the DataDog agent Install
With the plan registered we are ready to run the plan by running the following command. Change the target IP address and username for your environment.
bolt plan run datadog::install --targets 10.0.0.199 --no-host-key-check --user root
If the plan ran successfully it should have generated output similar to that displayed below.
bolt plan run datadog::install --targets 10.0.0.199 --no-host-key-check --user root
Project-level configuration in bolt.yaml is deprecated if using bolt-project.yaml. Transport config should be set in inventory.yaml, all other config should be set in bolt-project.yaml.
Starting: plan datadog::install
Starting: install puppet and gather facts on 10.0.0.199
Finished: install puppet and gather facts with 0 failures in 11.14 sec
Starting: apply catalog on 10.0.0.199
Finished: apply catalog with 0 failures in 109.16 sec
Finished: plan datadog::install in 2 min, 1 sec
Plan completed successfully with no result
If our plan ran successfully we should be able to log into our Datadog account and see the newly added node in our inventory.

We have now successfully deployed a Datadog agent using Puppet Bolt. Puppet Bolt also supports inventory plugins to dynamically target nodes in AWS, Azure, VMware vSphere and others. This enables us to quickly rollout agents to hundreds or thousands of nodes in minutes. Puppet Bolt can also use facts about the system or cloud tags to dynamically configure Datadog classification information.
The Puppet Forge has a large amount of existing content that can be utilized to quickly get started with other automation.