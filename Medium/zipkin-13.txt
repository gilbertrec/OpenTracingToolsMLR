Tracing Express services with Zipkin and OpenTelemetry
Fateme Ahmadi
Fateme Ahmadi

Mar 28, 2020·4 min read





Today I decided to share one of the challenges I have faced and the solution that I have found to solve it.
What is the problem?
In a project, I was a Nodejs developer in a team. In the backend of the project, we have some services that work together in a microservice architecture. These services write in Nodejs programming language.
The problem arose when we recognized that some requests to a microservice could have taken longer than the usual time and we get the response with delay.
So we want to know where the application spent most of its time and we do not have an idea about what occurs in the backend and why these requests get a longer time and what service or module creates this problem.
In the last few years, the microservice architecture pattern has become mainstream. The pattern solves many problems of the monolithic architecture design but has some drawbacks, one of the biggest being how hard it is to debug the system as a whole.
In a microservice architecture, tracing is extremely challenging because requests will span multiple services, each executing one or more processes, across multiple servers
Distributed Tracing help to Microservices Architecture !
One of the best tools you can have in your belt when you are dealing with microservices is distributed tracing. Distributed tracing lets you know what is happening in your system and which parts are involved, even in production.
So this is a time that Zipkin can help you to trace your request.
What is Zipkin?
Zipkin is an open-source distributed tracing system based on Google Dapper and initially developed by Twitter, is a Java-based distributed tracing application that helps gather timing data for every request propagated between independent services. It has a simple management console where we can find a visualization of the time statistics generated by subsequent services.

zipkin flow
The component in an instrumented app that sends data to Zipkin is called a Reporter. Reporters send trace data via one of several transports to Zipkin collectors, which persist trace data to storage. Later, storage is queried by the API to provide data to the UI.
First solution
So I decided to instrument my application by adding tracing to common pieces in the code. As my project was very huge I create a simple project and build a couple of Express microservices and use Zipkin-js to trace them. based on this article.

After I build this and use the tracker in it everything is ok but tracer in my project did not work properly. Zipkin-js or display UI does not show the correct span and generate span in Zipkin-js is hard because we don’t have full control over it. Furthermore, I think Zipkin’s document is not complete.
So I was very frustrated and wanted to solve this problem. After research on it, my CTO suggested to me to use OpenTelemtry library for the client of the tracer processes. It helped me further control on generate span. So I had to setup OpenTelemtry so that it can send traces to Zipkin. In other words, Zipkinn is in its place in the backend. OpenTelemtry comes as a client-side and uses Zipkin’s protocol so it can speak with Zipkin and send a trace to it.
So my problem changed as follow:
I have a couple of Express microservices ( hello-service-1 & hello-service-2 ), Zipkin stay in the backend server and OpenTelemtry is in the client. I want to call hello-service-1 from sample client. In hello-service-1 call hello-service-2 and set trace for this request. it’s clear! you think we have 2 services for example login and purchase. Each user must log in first and then be allowed to do purchase actions. So in this example, we have 2 services: login and purchase. purchase service call login service to check user access. In this example, purchase as hello-service-1 and login as hello-service-2.
So we want to trace a request when it starts from purchase and goes to login. We want to find out exactly where this request has spent more time.
Setup Project:
A solution that I find is to use express-http-context module to change request context such that I can set parent of a request.
tracer.js :

with createSpan and endSpan now I can easily use this function in everywhere I want to trace and create or end span

We are going to use got as our HTTP client to make the request. To get got working with Zipkin we need to instrument it. I instrumented it manually:

got.js
Usage with express as a middleware:

service_1

service_2
Now, if we get both services up and make a request to localhost:8081 we can see a trace like this in our zipkin-ui:

we can now understand what is happening in our services just by looking at the trace. Pretty neat, right? :)
a github repo with the full example can be found here.