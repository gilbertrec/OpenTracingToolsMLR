SRE — Tools of the Trade
Setu Dixit
Setu Dixit

Jul 18, 2020·4 min read




The new world of DevOps, platform engineering and Site Reliability Engineering. It is brave new world for me. But this is one place where i wanted to be for a long long time, to get my hands dirty in the new wonders of IT world. What i was doing before it, was solution designing, architecting in the telecom OSS software world and it was a very traditional place. There are quite a few off the shelf COTS/Product Suites which were typically big product groups , installed in on-premise setups in Telco Data Centres. There was a different way of working, designing the solutions and language.
DevOps and SRE are products of the cloud native technical eco-system. They are born in the realms of Clouds (read data centre of AWS’s, Microsoft’s etc.) and adapted to system engineering practices by people who are developers at heart. Confused ? That’s what i was when i looked at it for the first time. It was a transition from SNMP to HTTP for me. From the packet inspect in wireshark to request tracing in Postman.So thats the move.
Anyways , enough about me. So what is SRE, it stands for Site Reliability Engineering (https://en.wikipedia.org/wiki/Site_Reliability_Engineering) , which in the digital world means that you are (among one of many) responsible for making sure that the Site (read website) for your organisation is reliable, and the fact that you are an engineer and not just a support person on call. Now two key things there, First and foremost , Reliability — Which mainly means that your Digital Services (Web Pages, API’s etc.) are :
1. Up and available
2. and running with sufficient capacity and latency to ensure your desired customer experience
Note that its not just about making sure that its up and running , but the experience that customer is getting also needs to be factored in, as always !
The second Key bit about SRE is that , it is not a support function but an engineering function primarily. Which means that as an SRE , we need to create engineering solutions for the monitoring, running and improving the customer experience. So the job description comes with a requirement for understanding end-to-end Digital architecture , which are API driven , on the web and are microservices based. You out to understand all the components starting from the CDN hosting the content on the web for you , to the API gateways hosting your API’s, to the Cloud estate hosting your microservices and then the Databases at the backend NoSQL or SQL storing your data. Also since the speed of deployments is always going to be faster than traditional software system, SRE’s also need to be on-board the CI/CD systems , IaaC systems and all the new wonders of the DevOps world. Another key bit are the APM systems and any supporting systems which facilitate in the observability of the stack!
So, thats the trade, now to the key tools :
A) APM Systems : Application Performance Management tools are the ones which monitor your stack and help with the identification of issues as they occur or sometimes even before they occur (predictive insights). There is a whole array of such systems , but the key is to choose one system suitable to your stack . Maybe you have a big part of your stack On-Prem so you would want a tool which performs good in On-Prem Deployment. or more likely you have most of your stack as Cloud Native , so you want a SaaS APM solution that its more native to your stack. There are systems like Datadog, AppDynamics, Dynatrace, Splunk all of which provides one or more of the services in the APM space.
B) Notification Systems : Complementing your APM systems would be notification systems like PagerDuty, XMatters , which need to be efficient and clever enough so that they can identify multiple scenarios and complex team structures and cater to them. And also modern enough so that to be able to integrate with not just email and SMS , but also to the newer ways such as Slack channels etc.
C) DevOps CI/CD systems : A large part of the role would be spend in making updates , creating new configurations, code even and pushing it continuously into the different environments. Which means that you would need to be familiar with the CI/CD systems be it Azure devOps, Jenkins/Ansible or any other combination of that. And yes, dont forget Git and the the dream that is GitOps…oh inner peace :) .
D) Infrastructure as a Code Systems : Chances are that as part of an SRE, you would be doing a lot of sysadmin tasks , particularly about creating new cofings , deploying and modifying infrastructure in cloud and SaaS systems. For that Terraform is your friend.
E) Cloud and Containerisation Systems : And last but not the least by any strech of your imagination Cloud and Container technologies like AWS, Azure, GCP , IBM Cloud etc. And Docker and K8S for the containers. You would need to understand and work on these techs as per your role demand. Chances are that you would need a very good understanding of these techs day in day out.
There are quite a few other significant parts like CDN systems, API management systems etc which will be part of the portfolio also and you would learn these depending on the section of the organisation you land in. But the above tools are key part of the SRE trade in my view , which you would do well to learn and well….master (if you can that is).
So thats it for this one from me …more later …stay kool and keep monitoring your stacks :)..ciao!
Setu Dixit
An engineer on his SRE journey, a budding writer looking to write something genuine , a human looking to stay decent!

Follow






