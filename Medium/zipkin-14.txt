Use Zipkin to Trace Requests in Flask Application
Mohamed Saeed
Mohamed Saeed

Mar 10, 2020·5 min read




In this article, I will show you how to trace requests from Flask APIs using Zipkin.

The request’s trace.
All services are containerized and a docker-compose file is used to bring them all up.
You can find the code in this GitHub repository.
Used Tools
Zipkin
Zipkin is a distributed tracing system. Using Zipkin will make you able to see all the services that a request goes through, determine the duration time needed for each service.
What is a distributed tracing system:
From OpenTracing website:
Distributed tracing, also called distributed request tracing, is a method used to profile and monitor applications, especially those built using a microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance.
Flask
Flask is a lightweight WSGI framework. It is one of the most popular Python frameworks.
Here is their documentation.
py_zipkin
py_zipkin provides a context manager/decorator along with some utilities to facilitate the usage of Zipkin in Python applications.
You can read more about py_zipkin here.
We use py_zipkin here as the application is a Python app. If you are interested in other languages, you can find a list of supported tracers by Zipkin here.
Docker Compose
Docker Compose is a tool that you can use to define and run multi docker containers. You use a YAML file to define all services and with just one command you can start them all.
To learn more about Compose, see their documentation.
The code
As shown in the following image, api_01 will send two requests, one to api_02 and the other to api_03. api_02 will send a request to api_03.

Dockerfile
Each API has its own Dockerfile. We build and ship the app environment using containers without the need to install or prepare the app env on the machine itself. So you don’t really need to install Python on your laptop.
From python:3.7

COPY ./requirements.txt /app/requirements.txt

WORKDIR /app

RUN pip install -r requirements.txt

ENTRYPOINT [ "python" ]

CMD [ "app.py" ]
In the requirements.txt file add
flask==1.1.1
requests
py_zipkin
docker-compose file
It is a very basic docker-compose.yaml file. Contests of four services, a Zipkin server, and 3 flask APIs.
version: "3.4"

services:
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"


  api_01:
    build:
      context: api_01
    container_name: api_01
    ports:
      - "5001:5000"
    environment:
      - 'ZIPKIN_DSN=http://zipkin:9411/api/v1/spans'
    volumes:
      - './api_01:/app'

...
All APIs’ code is mounted inside the containers. If you changed the code it will affect directly. I made it this way for development porpoises.
api_01
Import some libraries.
from flask import Flask, request
import requests
from py_zipkin.zipkin import zipkin_span, create_http_headers_for_new_span, ZipkinAttrs, Kind, zipkin_client_span
from py_zipkin.request_helpers import create_http_headers
from py_zipkin.encoding import Encoding
To start a Flask server:
app = Flask(__name__)
# Start the app server
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', threaded=True)
Start a Zipkin trace when a request is made to / route:
@app.route('/')
def index():
    with zipkin_span(
        service_name='api_01',
        span_name='index_api_01',
        transport_handler=default_handler,
        port=5000,
        sample_rate=100,
        encoding=Encoding.V2_JSON
    ):
        call_api_02()
        call_api_03()
    return 'OK', 200
zipkin_span will start a trace and creates the first span that is called “index_api_01”, then we will call the 2 functions call_api_02 and call_api_03. Each function will make a GET request to an API.
@zipkin_client_span(service_name='api_01', span_name='call_api_02')
def call_api_02():
    headers = create_http_headers()
    requests.get('http://api_02:5000/', headers=headers)
    return 'OK'


@zipkin_client_span(service_name='api_01', span_name='call_api_03_FROM_01')
def call_api_03():
    headers = create_http_headers()
    requests.get('http://api_03:5000/', headers=headers)
    return 'OK'
Notice that before calling the function a client span is created:
@zipkin_client_span(service_name='api_01', span_name='call_api_02')
Now we need to pass traceID and parent spanID to the next service to keep tracking the request. This can be done by passing headers that carry this information. In addition, it creates a new spanID for the next span.
headers = create_http_headers()
api_02
In api_02 we are expecting that this API can only be called using api_01. Also, we know that api_01 will send a request with headers that contain tracer information. So we can start our Zipkin trace as the following
@app.route('/')
def index():
    with zipkin_span(
        service_name='api_02',
        zipkin_attrs=ZipkinAttrs(
            trace_id=request.headers['X-B3-TraceID'],
            span_id=request.headers['X-B3-SpanID'],
            parent_span_id=request.headers['X-B3-ParentSpanID'],
            flags=1,
            is_sampled=request.headers['X-B3-Sampled'],
        ),
        span_name='index_api_02',
        transport_handler=default_handler,
        port=5000,
        sample_rate=100,
        encoding=Encoding.V2_JSON
    ):
        call_api_03()
    return 'OK', 200
It is as the same as api_01 except for zipkin_attrs. Here we are telling Zipkin tracer not to start a new trace but use the one which information is passed in the headers.
Then we call api_03 passing the new span information in the headers.
@zipkin_client_span(service_name='api_02', span_name='call_api_03')
def call_api_03():
    headers = create_http_headers()
    requests.get('http://api_03:5000/', headers=headers)
    return 'OK'
api_03
In api_03 we will start Zipkin trace as we did in api_02. But after that, we will call a function that sleeps for 2 seconds
@zipkin_client_span(service_name='api_03', span_name='sleep_api_03')
def sleep():
    time.sleep(2)
    return 'OK'
And that is it.
Run the demo
Clone the code
You can find the code in this GitHub repository.
Start The Containers:
To start the containers run the following command:
docker-compose up --build
Then visit the api_01’s URL [ http://localhost:5001 ]
Remember the request flow.

To see this on Zipkin, visit Zipkin’s URL [ http://localhost:9411/zipkin ] then click on the search button to get traces saved.
Select the trace that is saved last.

Select the trace.
And here we go!

As you can see from the previous image, api_01 made 2 requests ‘to api_02 and api_03’. Also, api_02 made a request to ‘api_03’
Each row here represents a span. You can create spans whenever it is needed.
The previous run used a basic installation, there are more advanced options and ways to create spans and to implement the whole solution. This demo wasn’t meant to be complicated as it is meant to be a POC.
For more information, please read the following documentation:
Zipkin official page
py_zipkin github repository
If you have any question, you can ask the Zipkin dev team on gitter, here