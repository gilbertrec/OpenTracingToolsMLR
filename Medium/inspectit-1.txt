How to easily apply Performance Management with InspectIT
Daniel S. Blanco
Daniel S. Blanco
Follow
Apr 26 · 5 min read






Today we are going to see a fabulous open-source tool to perform different types of tasks, from tracing, monitoring, or instrumentation: InspectIT. This tool is a Java Agent, which we already know a little better from the last post we did, and you can see it here.
This software tries to minimize two things. On the one hand, the configuration time needed to use other Application Performance Management, APM, tools. Such as Jaeger, Prometheus, Zipkin or Micrometer. And on the other hand, reduce the modifications to be made in our applications, if we want to perform instrumentation tasks.
InspectIT is based on OpenCensus, which is a set of open software libraries made in different languages that allow us to obtain distributed metrics and traces. This software already has a wide range of exporters that allow sending the information to other monitoring tools. And InspectIT supports most of these exporters.
For all these reasons, InspectIT is a great tool. As it is a Java Agent we will not need to modify our applications to obtain performance information. And with the preconfigured exporters, we can obtain metrics and traces automatically and send them to different destinations.
Through the examples, we will be able to see how to obtain this information from our application. The operation will be similar in the different examples. In order to make it work we will have to follow the next two steps:
Associate the java agent stored in the library through the JVM argument ‘-javaagent:/full/path/to/library’.
Associate through a JVM argument the exporter property to be used. We can associate one or more properties, each one with its corresponding argument.
For the first example, we will use a Jaeger exporter, with which we will be able to obtain the application traces. The base of it will be one of our examples that we have done in previous posts, based on Apache Camel, and that you can see here. Just to remember, Jaeger is a tool or Tracer that will allow us to collect the information of the traces of our application and to visualize them in an own graphical interface.
The steps are as follows:
On the one hand, we have to download the library that contains the java agent, we can do it from here. And we place it in a path that we will indicate later when we start the application.
Start Jaeger, for example with a docker-compose like the following one.
version: '2.4'
networks:
  sandbox-apache-net:
    ipam:
      driver: default
      config:
        - subnet: 172.24.0.0/16
services:
  mysql:
    image: mysql:5.7.26
    mem_limit: 2G
    container_name: sandbox-apache-mysql
    hostname: sandbox-apache-mysql
    networks:
      sandbox-apache-net:
        ipv4_address: 172.24.1.1
    environment:
      MYSQL_HOST: sandbox-apache-mysql
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - ./configs/mysql/conf.d/custom.cnf:/etc/mysql/conf.d/custom.cnf
      - ./configs/mysql/scripts:/docker-entrypoint-initdb.d
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - 16686:16686
      - 14268:14268
Finally, start the JVM passing the arguments that allow us to configure the desired exporter. For the case of Jaeger we will use the following ones:
-javaagent:/home/deesebc/Downloads/inspectit-ocelot-agent-1.8.1.jar -Dinspectit.exporters.tracing.jaeger.url=http://127.0.0.1:14268/api/traces 
-Dinspectit.exporters.tracing.jaeger.service-name=inspectitJaegerExample
In the URL property, we indicate the address where Jaeger is located, and with service-name we can indicate the name with which we will register the Jaeger traces.
As a previous step to see how Jaeger works, we are going to make several queries to our application. So that they can be registered by InspectIT. If you use the code of my application, it will be an invocation similar to this: http://localhost:9090/book/1.
If we access the URL http://localhost:16686/search we will be able to access the trace browser and search for our application’s traces.

In the next example, to see more of the potential of InspectIT and to see how it works to obtain metrics, we will make use of the exporters for Prometheus. The example on which we will be based will be this one.
We start again preparing a docker-compose that allows us to deploy Prometheus. We can base it on the one from the previous example and it would be something similar to this:
version: '2.4'
networks:
  sandbox-apache-net:
    ipam:
      driver: default
      config:
        - subnet: 172.24.0.0/16
services:
  mysql:
    image: mysql:5.7.26
    mem_limit: 2G
    container_name: sandbox-apache-mysql
    hostname: sandbox-apache-mysql
    networks:
      sandbox-apache-net:
        ipv4_address: 172.24.1.1
    environment:
      MYSQL_HOST: sandbox-apache-mysql
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - ./configs/mysql/conf.d/custom.cnf:/etc/mysql/conf.d/custom.cnf
      - ./configs/mysql/scripts:/docker-entrypoint-initdb.d
      
  prometheus:
    image: prom/prometheus:v2.6.1
    ports:
      - 9091:9090
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      sandbox-apache-net:
        ipv4_address: 172.24.1.2
    extra_hosts:
      docker.host: 172.28.0.1
172.28.0.1 is the IP of the docker bridge interface.
The next point will be to start our application with the arguments that allow us to export the information to Prometheus.
-javaagent:/home/deesebc/Downloads/inspectit-ocelot-agent-1.8.1.jar -Dinspectit.exporters.metrics.prometheus.host=172.28.0.1 
-Dinspectit.exporters.metrics.prometheus.port=8888
Let’s remember that for Prometheus to work it has to read, from a specific URL, information about the application. So on the one hand we must configure Prometheus to read from a specific point. And we will do this through the Prometheus configuration file (part of the docker-compose):
scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 1m
    static_configs:
      - targets: ['localhost:9090']
  - job_name: 'apache_example'
    scrape_interval: 1m
    metrics_path: '/metrics'
    static_configs:
      - targets: ['172.28.0.1:8888']
And through the JVM arguments, we will indicate to InspectIT that we want to expose the information of our application in the IP and port indicated. Something that in the example on which we based was done by Spring Actuator.
Once everything is started, we will make a couple of invocations as mentioned above. And now we can access Prometheus and see the monitoring that has been done.
If we access the route http://localhost:8888/metrics we will be able to see the different metrics that we are generating from the application. And if we access the Prometheus URL http://localhost:9091/targets we can see if our endpoint is being read correctly by Prometheus.

The next step will be to access http://localhost:9091/graph and make a graph based on the metrics obtained. For example, one that counts the invocations that we make to endpoints of our application, through the parameter http_in_count.

As you can see, it’s really easy. There are no more excuses to perform application performance management tasks with InspectIT. And these are just a couple of examples, but you can do more through the different exporters.