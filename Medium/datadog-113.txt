Using ELK to gauge signal vs alerts noise
Opsline
Opsline

Jul 27, 2018·3 min read




by Scott Morris

The classic ELK stack
Monitoring and alerting are key components of any well-designed system. Opsline, being an MSP (Managed Service Provider) with many clients, each with many systems to be monitored, needed a solution for managing the vast array of monitors (and their subsequent triggered alerts) across all clients. To this end, we designed and built a system for centralizing all our clients’ alerts in a user-friendly visual dashboard to help Opsline engineers keep tabs on the health of our clients’ systems.
How we did it
The primary monitoring & alerting tools used by Opsline are Datadog and AWS Cloudwatch.

Fortunately, both these monitoring tools have rich APIs for extracting relevant data about monitors and any triggered alerts. With a little bit of custom Python code, we could pull alert data from each monitoring system, for each client, and output the JSON response data.
We built the Python script into a Docker image and deployed the container on AWS ECS. We setup the ECS Task to output to the default AWS Cloudwatch Logs and created a Cloudwatch Events Rule to schedule the execution of the Task every 5 minutes. This resulted in a batch of triggered alert JSON data being regularly pushed to the Cloudwatch Log Group for the Task.
From here, it was easy enough to setup a single-task ECS Service running a Logstash container configured to ingest the Python script’s Cloudwatch log and ship the data to a small Elasticsearch/Kibana cluster hosted on Elastic Cloud. Once the alert data for all clients is stored in Elasticsearch, the power of Kibana can be leveraged to slice and dice the data any way you like. We built several Kibana visualizations to make sense of the data, then put it all together in a Kibana dashboard for a one-stop method of seeing clients’ alert status at a glance (see anonymized screenshot below).

Opsline Kibana Alerts dashboard
We are actively using this Kibana dashboard to identify and prune noisy client alerts, escalate high priority alerts to relevant engineers, and keep our finger on the pulse of our clients’ system health.