Introduce Datadog APM in Golang application
Butter
Butter

Jan 18, 2020·4 min read




I had the opportunity to introduce Datadog APM in my work, so I would like to briefly summarize the method.

What I want to do with Datadog
Setting custom agent host
Change service name
Switch TraceList page every environment
Link logs such as queries to one request
Install Datadog Tracer
Tracing Go Applications
For configuration instructions and details about using the API, see the Datadog API documentation. For manual…
docs.datadoghq.com

Please install using the following command.
$ go get gopkg.in/DataDog/dd-trace-go.v1/ddtrace
At the moment, we use echo as the framework, and use gorm as ORM.
Therefore, the target files are as follows.
$ cd $GOPATH/pkg/mod/gopkg.in/\!data\!dog/dd-trace-go.v1@v1.18.0
$ tree contrib/jinzhu
contrib/jinzhu
└── gorm
    ├── example_test.go
    ├── gorm.go
    ├── gorm_test.go
    └── option.go
$ tree contrib/labstack
contrib/labstack
└── echo
    ├── echotrace.go
    ├── echotrace_test.go
    ├── example_test.go
    └── option.go
Looking official documentations
I refer to the following three.
Tracing Go Applications
For configuration instructions and details about using the API, see the Datadog API documentation. For manual…
docs.datadoghq.com

Package echo
Package echo provides functions to trace the labstack/echo package (https://github.com/labstack/echo).
godoc.org

Package gorm
import "gopkg.in/DataDog/dd-trace-go.v1/contrib/jinzhu/gorm" Package gorm provides helper functions for tracing the…
godoc.org

Implementation
Setting custom agent host and Change service name.
func startDatadogTrace() {
    // See: https://docs.datadoghq.com/ja/tracing/setup/go/#change-agent-hostname 
    addr := net.JoinHostPort(  
        os.Getenv("DD_AGENT_HOST"),   
        os.Getenv("DD_TRACE_AGENT_PORT"),
    )
    // start the tracer with zero or more options   
    tracer.Start(tracer.WithServiceName("my-app"), tracer.WithAgentAddr(addr))
}
This completes the implementation of start to trace.
※Don’t forget to implement `tracer.Stop()` in the caller.
Switch TraceList page every environment
With the above implementation alone, TraceList cannot be divided for each environment, so we will make some changes.
func startDatadogTrace() {
    // See: https://docs.datadoghq.com/ja/tracing/setup/go/#change-agent-hostname
    addr := net.JoinHostPort(
        os.Getenv("DD_AGENT_HOST"),
        os.Getenv("DD_TRACE_AGENT_PORT"),
    )
    var opts []tracer.StartOption
    opts = append(opts, tracer.WithServiceName("my-app"), tracer.WithAgentAddr(addr))
    datadogEnv := os.Getenv("DATADOG_ENV")
    if datadogEnv != "" {
        opts = append(opts, tracer.WithGlobalTag(ext.Environment, datadogEnv))
    }
    // start the tracer with zero or more options
    tracer.Start(opts...)
}
It doesn’t need to be an environment variable, but you need to pass `tracer.WithGlobalTag(ext.Environment, datadogEnv)` to `tracer.Start`.
By doing this, you can switch the environment as shown in the following screenshot.

Link logs such as queries to one request
I struggled with this very much. The official documentation says to implement as follows.
echo
Package echo
Package echo provides functions to trace the labstack/echo package (https://github.com/labstack/echo).
godoc.org

// Create a new instance of echo
r := echo.New()

// Use the tracer middleware with your desired service name.
r.Use(Middleware(WithServiceName("image-encoder")))

// Set up some endpoints.
r.GET("/image/encode", func(c echo.Context) error {
    // create a child span to track an operation
    span, _ := tracer.StartSpanFromContext(c.Request().Context(), "image.encode")

    // encode an image ...

    // finish the child span
    span.Finish()

    return c.String(200, "ok!")
})
gorm
Package gorm
import "gopkg.in/DataDog/dd-trace-go.v1/contrib/jinzhu/gorm" Package gorm provides helper functions for tracing the…
godoc.org

// Register augments the provided driver with tracing, enabling it to be loaded by gormtrace.Open.
sqltrace.Register("postgres", &pq.Driver{}, sqltrace.WithServiceName("my-service"))

// Open the registered driver, allowing all uses of the returned *gorm.DB to be traced.
db, err := gormtrace.Open("postgres", "postgres://pqgotest:password@localhost/pqgotest?sslmode=disable")
defer db.Close()
if err != nil {
    log.Fatal(err)
}

user := struct {
    gorm.Model
    Name string
}{}

// All calls through gorm.DB are now traced.
db.Where("name = ?", "jinzhu").First(&user)
If this is implemented almost as it is, the query will be linked to one request and displayed, but a separate log of the query will also be transferred.
Shamefully, it took me a long time to solve this. (Even if you ask, you can’t get a clear answer.)
So I looked at DatadogTracer’s grom implementation.
// Open opens a new (traced) database connection. The used dialect must be formerly registered
// using (gopkg.in/DataDog/dd-trace-go.v1/contrib/database/sql).Register.
func Open(dialect, source string, opts ...Option) (*gorm.DB, error) {
    sqldb, err := sqltraced.Open(dialect, source)
    if err != nil {
        return nil, err
    }
    db, err := gorm.Open(dialect, sqldb)
    if err != nil {
        return db, err
    }
    return WithCallbacks(db, opts...), err
}
The important thing is the `gormtrace.WithCallbacks` function.
// WithCallbacks registers callbacks to the gorm.DB for tracing.
// It should be called once, after opening the db.
// The callbacks are triggered by Create, Update, Delete,
// Query and RowQuery operations.
func WithCallbacks(db *gorm.DB, opts ...Option) *gorm.DB {
    afterFunc := func(operationName string) func(*gorm.Scope) {
        return func(scope *gorm.Scope) {
            after(scope, operationName)
        }
    }

    cb := db.Callback()
    cb.Create().Before("gorm:before_create").Register("dd-trace-go:before_create", before)
    cb.Create().After("gorm:after_create").Register("dd-trace-go:after_create", afterFunc("gorm.create"))
    cb.Update().Before("gorm:before_update").Register("dd-trace-go:before_update", before)
    cb.Update().After("gorm:after_update").Register("dd-trace-go:after_update", afterFunc("gorm.update"))
    cb.Delete().Before("gorm:before_delete").Register("dd-trace-go:before_delete", before)
    cb.Delete().After("gorm:after_delete").Register("dd-trace-go:after_delete", afterFunc("gorm.delete"))
    cb.Query().Before("gorm:query").Register("dd-trace-go:before_query", before)
    cb.Query().After("gorm:after_query").Register("dd-trace-go:after_query", afterFunc("gorm.query"))
    cb.RowQuery().Before("gorm:row_query").Register("dd-trace-go:before_row_query", before)
    cb.RowQuery().After("gorm:row_query").Register("dd-trace-go:after_row_query", afterFunc("gorm.row_query"))

    cfg := new(config)
    defaults(cfg)
    for _, fn := range opts {
        fn(cfg)
    }
    return db.Set(gormConfigKey, cfg)
}
That way, you don’t need to call `sqltrace.Register` nor `gormtrace.Open`.
The final implementation is as follows.
func connectDB() *gorm.DB {
    connection := os.Getenv("MYSQL_CONNECTION")

    db, err := gorm.Open("mysql", connection)
    if err != nil {
        panic(err.Error())
    }

    // Add callbacks for Datadog.
    db = gormtrace.WithCallbacks(db)
    return db
}
Conclusion
Of course, it’s important to look at the official documentations.
It’s also important to look at the implementation of the library and figure out how to implement it right for your application.