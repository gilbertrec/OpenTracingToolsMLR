Monitoring Automation, Series 1 : DataDog Synthetics Terraform
Bhasvanth Yarla
Bhasvanth Yarla

May 25, 2020·4 min read





As a Devops Engineer, one might have to monitor various applications, services and endpoints/API. There are a lot of tools and services available which can be used to achieve the goal.
What if you have to monitor a lot of endpoints/API’s for a number of applications/projects. Creating those API tests manually is a tedious process, time consuming and error prone.
In this article, let’s go over the automation for monitoring API Endpoints using DataDog API Synthetics and Terraform.
What is Datadog ?
Datadog is a monitoring service which can be used to monitor servers, databases, tools, and services, through a SaaS-based data analytics platform.
What are Synthetics?
A service, which can be used to monitor your applications and API endpoints via simulated user requests and browser rendering, Synthetics helps you ensure uptime, identify regional issues, and track application performance.
How does API Synthetics work?
Monitoring using Synthetics is based on an API request & response.
For example, you have a text parser service, which has an API endpoint. And you want to the test whether parser service API is up and running or not. So, at the time of configuring API Synthetics in Datadog, you need to provide an API endpoint, type of request (GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS) and a set of assertions to validate if the response is valid or not. If the assertions defined fail during the API test, that indicates there may be some issue with the API service and the DataDog can notify a person or team or other a third party services like Pager Duty. Below is the sample API Synthetic Test.
Note- In order for the below test to work, you might have to whitelist the DataDog IP’s, here is the link (https://ip-ranges.datadoghq.com/synthetics.json) to get the latest list of DatagDog IP’s.

Create DataDog API Synthetics withTerraform
In this section, Lets go through the requirement, configuration which are required to create the DataDog API Synthetics through terraform.
Requirements
Configuration
Terraform Script
Requirements
Once the access to DataDog is setup, API and APP Keys need to be generated. Which will be used in Terraform to create the API Synthetics.
Create API and APP keys :
After login to DataDog, navigate to Integrations → API.
Under API Keys Section, provide the API Key Name and click Create API Key to generate API Key
Under Application Keys Section, provide Application Key Name and click Create Application Key to generate the Application Key.
Please find below screenshot for reference.

Terraform Configuration
Use Terraform DataDog Provider and configure it to use the API and APP Keys which we have generated in the above section. Below is the code snippet to configure DataDog Provider :
# Configure the Datadog provider
provider "datadog" {
  api_key = "93bc63e0b4f48fbbff568d9fc0dc3def"
  app_key = "a8be41babf076626874c3ec618e62a84e218f6de"
  api_url = "<https://api.datadoghq.com/>"
}
Define you monitoring Endpoints
As we are automating the DataDog API Synthetics tests creation, we have to generate a map/dictionary with the services and their endpoints, success messages which define the API is healthy. Below is the sample dictionary map. In the below tfvars file, we have defined notify & dd_synthetics (a dictionary). notify is the notification email address, i.e who should be receive the alert in case the API endpoint isn’t working. In dd_synthetics dictionary, I’m monitoring two services api and parser using the endpoints and message (success message).
notify = "bhasvanth@sandbox.com"
dd_synthetics  = {
    "api" = {
        "message" = "API service is working Fine.", 
        "endpoint" = "<http://dev.sandbox.com/api/admin/health>"
    }, 
    "parser"= {
        "message" = "Parser service is working Fine", 
        "endpoint" = "<https://dev.sandbox.com/parser/health>"
    }
}
Define terraform variables
variable "dd_synthetics" { }
variable "notify" { }
variable "region" {
    default = "us-west-2"
}
Create DataDog API Synthetics Resources
Now, in the terraform resource block “datadog_synthetics_test”, we have to iterate the dd_synthetics dictionary using for_each and generate the datadog_synthetics_test resources for each and every service defined in the dictionary. Below is the Terraform resource block.
resource "datadog_synthetics_test" "api_synthetics" {
  for_each = var.dd_synthetics_map
  type = "api"
  subtype = "http"
  request = {
    method = "GET"
    url = "${each.value.endpoint}"
  }
  assertions = [
    {
      type = "statusCode"
      operator = "is"
      target = "200"
    },
    {
      type = "body"
      operator = "contains"
      target = "${each.value.message}"
    }
  ]
  locations = [ "aws:${var.region}" ]
  options = {
    tick_every = 900
  }
  name = "${each.key}-${var.env_name}"
  message = "Notify ${var.notify}"
  tags = ["app_name:${each.key}"]
  status = "live"
}