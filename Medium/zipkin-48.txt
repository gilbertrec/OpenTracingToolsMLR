A very simple OpenTracing example
written in Go, visualized with Zipkin
Jeff Gensler
Jeff Gensler

Feb 5, 2017·2 min read




If you want a much more comprehensive article about OpenTracing, check out the following article.
Tracing HTTP request latency in Go with OpenTracing
In Go 1.7 we have a new package net/http/httptrace that provides a convenient mechanism for observing what happens…
medium.com

I thought that there was a lot of code and words for a single sitting, so I’ve decided to distill most of it down for those of us that are new to application tracing.
We will use the following library without the use of Jaeger. Most of the code was stolen from their /examples section.
openzipkin/zipkin-go-opentracing
zipkin-go-opentracing - OpenTracing Tracer implementation for Zipkin in Go
github.com

Our Application
We will set up a Proxy server. When a request comes in, we will start a “span.” When the response comes back, we will end the span. If we took this a step further, we could record ongoing requests and see which requests land on which services.
When we start our application, we will need to do a bit of initialization.
// Here are some of the necessary components that an application reporting to Zipkin will need
collector, err := zipkin.NewHTTPCollector(zipkinHTTPEndpoint)
if err != nil {
  fmt.Printf("unable to create Zipkin HTTP collector: %+v", err)
  os.Exit(-1)
}
recorder := zipkin.NewRecorder(collector, debug, hostPort, serviceName)
tracer, err := zipkin.NewTracer(
  recorder,
  zipkin.ClientServerSameSpan(sameSpan),
  zipkin.TraceID128Bit(traceID128Bit),
)
if err != nil {
  fmt.Printf("unable to create Zipkin tracer: %+v", err)
  os.Exit(-1)
}
// We will use this as the way to tracking traces between requests and responses
cache := make(map[int64]opentracing.Span)
In our request handler, we will start the trace.
// Here is where we create the start of our "span"
// You can see that there isn't anything Zipkin-specific below
span := tracer.StartSpan("GotRequest")
cache[ctx.Session] = span
tracer.Inject(
 span.Context(),
 opentracing.HTTPHeaders,
 opentracing.HTTPHeadersCarrier(req.Header))
ctx.Logf("%v", req.Header)
// This tag is viewable by clicking on the trace *and* clicking
// on the span in the trace
span.SetTag("Host", req.Host)
span.LogEvent("Injection")
Finally, we use our response header to finish the span.