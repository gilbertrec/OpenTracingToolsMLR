Tracing the API calls in Your Helidon Application with Jaeger
Jobinesh
Jobinesh

Apr 11, 2020·2 min read




While building applications that comprises of multiple microservices, it is essential to have a mechanism in place to collect and analyze the details of API calls, timing data needed to troubleshoot latency problems and logging error generated from API calls. Jaeger is one such solution and used for monitoring and troubleshooting application built following microservice based architecture with following capabilities:
Distributed context propagation
Distributed transaction monitoring
Root cause analysis
Service dependency analysis
Performance / latency optimization
Jaeger is hosted by the Cloud Native Computing Foundation (CNCF) as the 7th top-level project (graduated in October 2019).
Eclipse MicroProfile, OpenTracing and Jaeger
As there are multiple tracing solutions out there similar to Jaeger(such as Zipkin), it is really good to avoid vendor lock-in by having some standardization around APIs that work with different providers.The OpenTracing addresses this part of the problem, it a vendor-agnostic API to help developers easily instrument tracing into their code base without worrying about underlying tracing implementation. Good news is that Eclipse MicroProfile has standardized the use of OpenTracing API in the stack. You can find more details here: https://github.com/eclipse/microprofile-opentracing . In nutshell, you can switch between various tracing implementations without making any major code change in your application. The changes are limited to making some config entries in the application depending upon the tracing provider(and your customization requirements) and then of course, using the right dependency based on the vendor.
Helidon MP and Jaeger
In this post I am sharing simple Helidon MicroProfile based application that uses Jaeger to trace the API calls. Heres is the link to the official doc :https://helidon.io/docs/latest/#/tracing/03_jaeger
The complete source used for building this example is available here: https://github.com/jobinesh/cloud-native-applications/tree/master/helidon-example-mp-jaeger . As you have noticed, this is a regular simple Helidon MP application. That said, however, a couple of things thing that you my find interesting in this example application:
Dependency to helidon-tracing-jaeger in the pom. Here is the pom used for this example: https://github.com/jobinesh/cloud-native-applications/blob/master/helidon-example-mp-jaeger/pom.xml
Jaeger Tracing Config in the application.yaml: https://github.com/jobinesh/cloud-native-applications/blob/master/helidon-example-mp-jaeger/src/main/resources/application.yaml
The org.eclipse.microprofile.opentracing.Traced annotation: This allows fine-tuned control over which classes and methods create OpenTracing spans. More details here:http://download.eclipse.org/microprofile/microprofile-2.0-javadocs-test/apidocs/org/eclipse/microprofile/opentracing/Traced.html. The following GreetResource class from this example uses this annotation (specified at class level): https://github.com/jobinesh/cloud-native-applications/blob/master/helidon-example-mp-jaeger/src/main/java/io/helidon/examples/mp/jaeger/GreetResource.java
How to run this example?
The detailed steps are available here: https://github.com/jobinesh/cloud-native-applications/blob/master/helidon-example-mp-jaeger/README.md
This post originally appeared on Jobinesh’s personal blog page: https://www.jobinesh.com/2020/04/tracing-api-calls-in-your-helidon.html
The views expressed on this post are my own and do not necessarily reflect the views of my employer.