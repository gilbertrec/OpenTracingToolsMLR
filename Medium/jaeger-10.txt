Configure multiple Jaeger Collectors in Oracle Cloud
Johan Louwers
Johan Louwers

Jan 11·4 min read





when embarking on a journey to build cloud native applications and/or decomposing a monolithic application into microservices one of the issues you will encounter at one point in time is the issue of getting a good insight in what the system is actually doing. The benefit of monolithic applications is that logging and monitoring can be done in one place, or at least a limited number of places.
Building a distributed solution, holding multiple services in a multitude of containers who are distributed over multiple cloud regions provide the issue that a single user interaction will trigger actions on multiple environments. When invoking an action on a monolithic application all logging will be on that specific server, doing the same the logging showcasing the entire chain of events will be distributed over all kinds of different systems (containers / serverless functions / virtual machines).
To help you tackle this issue Jaeger provides a part of this solution. Jaeger, an open source, end-to-end distributed tracing solution to Monitor and troubleshoot transactions in complex distributed systems. As on-the-ground microservice practitioners are quickly realizing, the majority of operational problems that arise when moving to a distributed architecture are ultimately grounded in two areas: networking and observability. It is simply an orders of magnitude larger problem to network and debug a set of intertwined distributed services versus a single monolithic application.
High Available Jaeger collectors in Oracle Cloud
In a recent blogpost I outlined how to build an (extreme) high available deployment of Jaeger collectors in Oracle Cloud to optimally benefit from the way Oracle Cloud is high available by nature.

High Available Jaeger Deployment in Oracle Cloud
The post outlines that for extreme high available deployment a number of nine nodes could provide the right number of Jaeger collector nodes to make sure you optimally benefit from the advantages of Oracle High Availability Cloud infrastructure. For details on the reasoning please refer to the previous blogpost on this subject.
Configure the Jaeger Agent
To ensure that each individual Jaeger Agent (deployed on an application node) is able to work with the available Jaeger collector nodes you will have to make sure your agent configuration supports this.

Jaeger Agent gRPC connections
The Jaeger agents connect via gRPC to the collector node. Part of the instructions given to the Jaeger agent is the address of the Jaeger collector or Jaeger collectors.
The basic CLI command to connect instruct the Jaeger Agent to connect to the Jaeger collector over gRPC is shown below;
./jaeger-agent — reporter.grpc.host-port 10.10.1.217:14250
As we do require a high available deployment we will have to provide the Jaeger agent with multiple Jaeger collector addresses which can be done with a CLI command as shown below. In the below example we will provide two different Collector endpoints to be used for gRPC communication.
./jaeger-agent — reporter.grpc.host-port 10.10.1.217:14250, 10.10.1.207:14250
Even though the above works without fail in a real production environment you will most likely want to start the agent as a daemon using Linux systemd. It is an option to pass all the address:port combinations directly as part of the systemd config, however, this is not a best practice. A better way is to ensure you store the Jaeger collector endpoints and all other Jaeger configuration in a configuration file and refer to this file when starting the Jaeger Agent.
Starting the Jaeger agent with a configuration file can be done using the command shown below;
./jaeger-agent — config-file=agent.yaml
The most basic YAML configuration could look like the one shown below. For a high available you will have to define multiple Jaeger collectors obviously.
reporter:
type: grpc
grpc:
host-port: 10.10.1.217:14250
(do note that medium is not really good in showing the correct level of indentation for YAML files)
Enterprise Architecture standard of distributed tracing
When developing a serious enterprise architecture with the goal to support DevOps teams with the right level of guidance to develop distributed solutions in a meaningful and unified way the topic of observability needs to be addressed.
Leaving the topic to the different application responsible teams will ensure that the end result is a multitude of different solutions and will prevent you from building an enterprise wide observability capability. Not having this enterprise wide observability capability will prevent you from getting the overall view into your landscape.
To prevent this issue it will be needed that an enterprise wide standard is created and is being provided to the different teams to adopt into their services.
The enterprise wide standard should consist out of guidance and examples as well as a number of predefined building blocks and central services. When done right components like the “Jaeger collector” are pre-build components that can be deployed by an application team and who are centrally developed and maintained. Components like the Kafka bus and the “Jaeger Ingester” should be services that are available and running within the enterprise landscape.
By having the standards, the guidance, the examples and building blocks and available services available to all the DevOps teams will make the inclusion of an enterprise wide standard for distributed tracing more efficient.