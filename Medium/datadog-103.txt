Release & Measure Code to Kubernetes using CircleCI/Quay/Datadog
Hugo Marcelo Del Negro
Hugo Marcelo Del Negro
Follow
Jan 8, 2019 · 8 min read






1. Platform Engineering to Kubernetes
The following story will show how it is possible to create a 100% automated software delivery using CircleCI to deploy into Kubernetes step by step, from Development to Staging and from Staging to Production using crafted tools.
Infrastructure
I have a Kubernetes Cluster 1.8 launched via Kops in AWS. If you need to understand how to create a cluster, then go to its official Github page https://github.com/kubernetes/kops which is really well documented.

2. Kubernetes Operations Tool
Defining the right branch strategy
Defining the right branch strategy is key for success in the long-term when too many features and engineers are involved in the development process. By adopting a DevOps mindset when working with the platform, engineers needs to find the accurate balance between developing a new feature, fixing the application and delivering software faster as possible to production frictionless and timeless.
Our scenario is going to work based on Release from trunk so we merge continuously to master and master is delivered through the deployment pipeline until production. Development will happen in short-lived feature branches which last as max a few days then it will be merged into master branch to be delivered via automation to the environments, manual tasks must not be allowed. Teams who uses release from trunk have a high release cadence.
Lets define what a release cadence is:
One of the things that a delivery team needs to do, often in collaboration with product management, is choose the release cadence of their product. … Your release cadence defines how often you release your solution both internally and externally into production (or the marketplace).

3. Release from trunk
The more low release cadence teams would need to use a more Trunk-based development approach in order to support every release properly since they will last more time in production and will need to be stable / frictionless and timeless consuming for engineers.

4. Trunk based development
Who else support this idea?
Microsoft does it in its VSTS internal development via what they call The Release Flow.
Google does Trunk Based Development.
I would say that it is the only way to run away from the merge hell where we spent hours trying to move code between environments and it is not a surprise, it will probably fail in the next environment, maybe because the merge was too big, maybe there were too many conflicts to solve, etc.
Use trunk as a single source of truth and keep it stable, deliver it, tag it. I have seen too many teams doing anything with master branch, that simply does not make any sense to merge something we cannot probe it works.
Git-Flow or Trunk Based Development?
Both strategies are really well accepted in the industry, these are the standards nowadays.
As engineers we will probably fall in one of the two options. This is true and it should be a well thought decision.
Gitflow
Gitflow work with the following branches:
Develop
Master
Feature
Hotfix
Release
Every iteration the development team will create branches from develop and integrate into it via pull requests. Once develop is ready to release, a release branch is created from it. When release branch is ready to production it is merged to master branch. Several merges are involved in order to move forward.
When to use:
When you are working on an open source projects.
When the team has several junior members.
When do not use:
When running an startup project it will produce a speed decrease in development team.
When you want to attach to DevOps and trust on automation.
When the team members are seniors.
Trunk Based Development
The branches involved in this strategy are:
Master
Short-lived feature branches
Engineers will work on a short-lived feature branch taken from master for a small period of time then release it. The release cadence tends to be really high since the team is going quickly into production and they trust in automated workflows to move faster.
When to use:
When adapting DevOps mindset.
When the team is adapting automation.
When the team have senior members.
When it is an startup project.
When do not use:
When the team is not senior.
When it is a large open source project.
So think before adapting the right strategy. After all, it is all about learning by doing, learning by measuring our processes, gaining feedback from the team, we can change it to improve the workflow as needed. There is not always a unique way of doing things. Every team and project is different.
Choosing the right tools for the job
Now that a branching strategy model is chosen it is time to think what is needed and easy to perform our job. I will describe below the reason I choose the following tools:
Helm Package Manager: It is the Kubernetes package manager. So it means we can convert a bunch on YML files used to deploy to Kubernetes in a package. Better yet, we can deploy every package as a single unit, so it gets abstraction, so it means we can deploy everything the same way. I found HELM really powerfull and one of the best tools to deploy into K8S. Imagine dozens of microservices all deployed the same way no matter the technology, it makes really easy to automate things.

4. Helm
CircleCI: A container based platform that allows to use ephemeral Docker containers to deploy our environments and die after completing the job. We use our own Docker images fully connected to the environments with the right tooling inside it, so every container has everything I need to accomplish my deployment. CircleCI is really fast technology, and since Circle 2.0, it allows custom workflows so engineers can choose the right path to go live.

5. CircleCI
Quay: Quay is a platform that builds and save docker images in a Registry. So far it does not do a good job at building images but it does on security. Every built image is fully analyzed in search of vulnerabilities which are always displayed nicely.

6. Quay
Datadog: This is a metrics backend like Graphite/Grafana which is really impressive and really easy to use. I use Datadog to measure infrastructure metrics like CPU/Memory utilization, custom business metrics and pipelines metrics. So the deployment tooling sends its deployment metrics to Datadog in order to count deployments/failures/timing via HTTP protocol (it can be via UDP protocol as well).
Preparing the API to CI/CD
The first step is to configure our service to be deployed via CircleCI. In order to do this we need to add a folder .circleci/config.yml which uses CircleCI workflows.

6. API Project

7. CircleCI Workflow
We can see that the workflow steps are:
Build & Run tests
Request to CircleCI an instance of docker daemon to build an image and upload it into Quay.io hashed (which will store this in the registry and perform the security analysis).
Perform the deployment in development environment without approval via Helm Package Manager.
Send the approvals for QA nd Production environments which must be manually approved by the release manager or whoever is in charge.
Deployments to QA/Prod are automatically triggered once approved.
We can see in the YML definition from CircleCI the usage of Global commands. As I mentioned before we use pre-built docker images with tools installed inside globally. In this case they are a bunch of bash scripts versioned to keep an historial of changes made and support retro-compatibility in case something was wrong with new versions of the tools.
I have a docker image per environment with the following inside:
Custom bash scripting for build and upload images to Quay.
Custom bash scripting for deploying to Kubernetes.
All necesary set of credentials for connecting the cluster in AWS are injected by CircleCI secrets when it runs the deployment containers.
Lets see how the docker image is built below:

8. Dockerfile CircleCI Custom
The Build Tool
The following bash script will do the following:
Receive a bunch of environment variables with desired configuration.
Send metrics to datadog backend via HTTP protocol.
Login into Quay.
Request the Docker Daemon to CircleCI. (I strongly suggest to avoid having Quay building images, it fail too often without reason.)
Push the Docker Image to Quay and run vulnerabilities check.

9. Build Tool
Below we can appreciate the vulnerability check in the images pushed.

10. Vulnerability Report
The Release Tool
The following Bash script will be executed after the docker image is pushed and the deployment is ready to be performed. This script is going to do the following:
Receive a bunch of configuration via environment variables.
Send metrics to Datadog via HTTP.
Initialize Helm.
Setup out private Helm repo in AWS.
Download the Helm values.yaml files from S3 (I prefer to keep deployment configuration isolated from Developer code).
Figure out if it needs to install / upgrade the application.
Install / Upgrade via Helm.

11. Release Tool
Platform Metrics
DevOps mindset trust strongly on automation. The best known way to understand whats going on in our automated workflows is to measuring metrics. This is a change enabler, it is our eyes. We cannot improve anything which is not measured. It is just working blind. I send metrics during my pipelines execution in order to understand what is being deployed, how often deployments happen, how much time consumes doing it. After some time by looking at the metrics you will be surprised on how much time was saved thanks to automation.
There outside exists too many time-series backend metrics that can be used as Datadog, in the image below to display them graphically.

12. Metrics

13. Kubernetes Logs
CircleCI offers a 2.0 feature named Insights which provides some beautiful information too.

14. CircleCI Insights
Ending Words
This is a really full crafted CI/CD workflow with an interesting toolset (at least to me). There are too many fancy options around we can use. The next generation CD tool for deploying Kubernetes is Spinakker which provides a bunch of features to improve automation and change significantly the concept of zero-downtime deployment via customizable strategies like Blue-Green/Canary/Black-Deployments that I will post later.

15. CircleCI Ending Workflow
Crafted CI/CD Tools Repo & API Repo below:
hmarcelodn/helm-tool
Bash Tools. Contribute to hmarcelodn/helm-tool development by creating an account on GitHub.
github.com

hmarcelodn/ts-sample
CircleCI / Helm. Contribute to hmarcelodn/ts-sample development by creating an account on GitHub.
github.com

I spent a lot of time preparing this full cycle, so if you liked, clap me. Thanks for reading.