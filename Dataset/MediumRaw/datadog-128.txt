Building a Custom DataDog Agent Check
Dennis Webb
Dennis Webb
Follow
Aug 26, 2017 · 5 min read






DataDog users already know they have agent checks available for a variety of different products and services. But what if there’s something you need to monitor that’s not currently supported? Then it’s time to write your own.
Complete source from this article available from https://github.com/denniswebb/datadog-openvpn
Use Case
I have multiple customers using OpenVPN AS from the AWS Marketplace for remote access to the AWS VPC. It’s a great solution because setting up a server requires very little configuration, and the client software is simple to setup on both Windows and Mac clients. When launching an instance, you choose how many licenses you need. Of course as customers grow, so does the number of licenses used. Monitoring available licenses is a must because users not being able to connect because they unexpectedly outgrew the connection count is just poor management. To prevent this, I wanted a DataDog alarm setup to warn us when available licenses crossed a threshold.
Before We Start Writing Code
The first step was discovering an easy way to get the license statistics. The sacli command has a parameter named LicUsage that does that.

sacli LicUsage showing 30 of 50 licenses used
The command outputs a string that represents a list. The first element is the number of licenses in use, and the second is the total number of connection licenses. That’s all the info we need as a basic subtraction will give us the number of available licenses.
Writing the Code
DataDog Agent Checks are made up of 2 files, <project_name>.py and <project_name>.yaml. These files should be saved in /etc/dd-agent/checks.d and /etc/dd-agent/conf.d respectively.
The first file we’ll create is /etc/dd-agent/conf.d/openvpn.yaml. Agent config files have 2 sections: init_config and instances. Below is our configuration file where we’ll set 2 parameters in the init_config section. metric_prefix will be the prefix for the metric name and sacli_path is the full path to the sacli tool.
The instances section defines one or more instances to check. If we were reporting file sizes, the ability to specify more than one file would be nice. This is what this section is good for. Since it is required, I put a single empty object to satisfy the requirement.
init_config:
  metric_prefix: openvpn
  sacli_path: /usr/local/openvpn_as/scripts/sacli

instances:
    [{}]
Now we’ll create the actual agent file in /etc/dd-agent/checks.d/openvpn.py. The file extension already tells you this is a Python module. Start by adding the imports section and declaring our new class that comes from DataDog’s AgentCheck module.
from checks import AgentCheck
class OpenVPN(AgentCheck):
    def check(self, instance):
if __name__ == '__main__':
    check.check(instance)
This is boilerplate that does nothing yet. The class’s check function is what’s called by the DataDog service regularly. To use the parameters in our configuration file, we call init_config.get. This returns the stored value, and if none is found, the second parameter is the fallback value.
def check(self, instance):
    metric_prefix = self.init_config.get('metric_prefix', 'openvpn')
Next up we’ll add a function to return a dictionary of the various OpenVPN license usage statistics. For this we’ll use Pythons ast and subprocess modules. Add these import lines to the top of your file. The check_output function will return the output of sacli LicUsage, while ast will be used to convert the stringified list outputted to a real Python list.
import ast
from subprocess import check_output
The get_license_usage function is added to the OpenVPN class. The function returns a dictionary of the license usage statistics returned by sacli. You’ll notice I used sudo to run sacli with elevated permissions. Unfortunately the command must be run with root privileges to work. Later i will cover adding the dd-agent user to /etc/sudoers to allow this.
def get_license_usage(self):
    sacli_path = self.init_config.get('sacli_path', '/usr/local/openvpn_as/scripts/sacli')
    lic_usage = ast.literal_eval(check_output(["sudo", sacli_path, "LicUsage"]))
    return {
        'used': lic_usage[0],
        'total': lic_usage[1],
        'available': lic_usage[1] - lic_usage[0]
}
Adding more functionality to our check function, we add a variable to hold the results of the get_license_usage function. The final 3 lines call the AgentCheck class’s gauge function to push the 3 metrics to DataDog. The format is gauge(<metric.name>, <metric-value>). In addition to gauge type, DataDog also support count and increment. For a complete list of metrics you can send, see this article. When submitting metrics you can add tags by using the named parameter tags and passing a list of tags to it.
def check(self, instance):
    metric_prefix = self.init_config.get('metric_prefix', 'openvpn')
    license_usage = self.get_license_usage()
    self.gauge('%s.licenses_used' % metric_prefix, license_usage['used'])
    self.gauge('%s.licenses_available' % metric_prefix, license_usage['available'])
    self.gauge('%s.licenses_total' % metric_prefix, license_usage['total'])
The Completed Agent Check
The complete project is available on GitHub at https://github.com/denniswebb/datadog-openvpn
import ast
from checks import AgentCheck
from subprocess import check_output

class OpenVPN(AgentCheck):

    def check(self, instance):
        metric_prefix = self.init_config.get('metric_prefix', 'openvpn')
        license_usage = self.get_license_usage()
        self.gauge('%s.licenses_used' % metric_prefix, license_usage['used'])
        self.gauge('%s.licenses_available' % metric_prefix, license_usage['available'])
        self.gauge('%s.licenses_total' % metric_prefix, license_usage['total'])

    def get_license_usage(self):
        sacli_path = self.init_config.get('sacli_path', '/usr/local/openvpn_as/scripts/sacli')
        lic_usage = ast.literal_eval(check_output(["sudo", sacli_path, "LicUsage"]))
        return {
                    'used': lic_usage[0],
                    'total': lic_usage[1],
                    'available': lic_usage[1] - lic_usage[0]
                }

if __name__ == '__main__':
    check.check(instance)
Final Steps
We’re still not done. Remember we need to run sacli with elevated privileges. The easiest way to accomplish this is to add the following line to your /etc/sudoers file using the visudo tool. This allows dd-agent to run sacli as root without being prompted for a password.
dd-agent ALL=NOPASSWD: /usr/local/openvpn_as/scripts/sacli
We need to test that our custom check runs without giving errors. The command to test a DataDog check is sudo -u dd-agent dd-agent check openvpn. If no errors are returned, restart the DataDog agent with sudo /etc/init.d/datadog-agent restart.
You can find your 3 new metrics in the DataDog app as openvpn.licenses_available, openvpn.licenses_used, and openvpn.licenses_total.

And that’s all there is to it. I hope this tutorial helps anybody looking to create their own DataDog agent check. DataDog has an article titled Writing an Agent Check that has another example. Also be sure to discover the different types of metrics you can send along with events.