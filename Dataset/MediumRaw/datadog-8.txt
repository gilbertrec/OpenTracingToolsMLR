Setup Datadog APM in Laravel with Docker and Kubernetes
Joshua Jordan
Joshua Jordan

Mar 20·4 min read




Have you been looking at the docs and been thinking where do I start??? Then read on ;)
!!IMPORTANT!!
Be very careful when setting up Datadog, if not done correctly you could occur big unexpected costs! Datadog will charge for usage.
For example if you paid for APM and infrastructure but enabled logs, they will still charge you for logs!
We fell into this trap and ended up with a large bill! luckily Datadog wavered it, as they could see it was not our error. But be so careful and monitor Datadog often and even setup alerts for any anomalies or keep an eye for them!
Before I begin remember this…
env:
- name: DD_CONTAINER_EXCLUDE
value: "name:dd-agent"
Datadog will literally log themselves if you don’t exclude it, we had over 83 million logs a day as a result of not knowing that.
Read this document carefully: https://docs.datadoghq.com/agent/guide/autodiscovery-management/?tab=containerizedagent
you need to understand how the exclude and include works, otherwise it’s likely that you will end up paying for it.
Okay now onto the actual setup :)
In a nutshell you will need to:
Download the Datadog extension
Enable the extension within your app
Composer install the ddtrace package
Init the datadog extension in the entry point to the app
Setup datadog via helm
Add the DD_AGENT_HOST to the env of your php app
1. Download the Datadog extension: I’ve set it up in ubuntu so have downloaded the debian package
jjcallis/datadog
Contribute to jjcallis/datadog development by creating an account on GitHub.
github.com

Or download a release here: https://github.com/DataDog/dd-trace-php/releases
2. Enable the extension within your app
Example Dockerfile with php fpm: https://github.com/jjcallis/datadog/blob/main/Dockerfile
Note when the docker image has built and installed the Datadog extension you should see the following:

3. Composer install the ddtrace package
datadog/dd-trace - Packagist
PHP Tracer The Datadog PHP Tracer ( ddtrace) brings APM and distributed tracing to PHP. Visit the PHP tracer…
packagist.org

composer require datadog/dd-trace
This will contain an integration specifically for Laravel (as well as many others). Which will literally trace the Laravel Router, Response, Dispatcher etc.

NOTE this package works hand in hand with the extension we enabled in step 2.You need both!
4. Init the datadog extension in the entry point to the app I.E actually initialise the ddtrace extension
require_once(ini_get('ddtrace.request_init_hook'));

If you exec into your php pod
kubectl exec -ti <pod> -n <namespace> bash
and do
php -r 'var_dump(ini_get("ddtrace.request_init_hook"));'
You’ll see the extension your going to initialise in index.php

So, that’s the app sorted! you now need to setup Datadog within your kubernetes cluster.
5. Setup Datadog via helm
I love to use helm: https://helm.sh when possible, it’s so good! It handles a good amount for us and benefits from tens or hundreds of individuals maintaining a repository.
jjcallis/datadog
Contribute to jjcallis/datadog development by creating an account on GitHub.
github.com

Apply this i.e
kubectl apply -f datadog.yaml
Note i’ve disabled logs, as I don’t require them but if you were to enable logs be sure to check what you need to exclude within
env:
- name: DD_CONTAINER_EXCLUDE
value: ..
Side track: I use flux: https://github.com/fluxcd/flux to automatically apply and disable manifests. This allows me to have version control via Github and I can easily disable packages if needed and have a complete audit of everything that is added to the cluster.
This will then enable Datadog with dogstatsd, APM, processAgent and clusterAgent etc.

6. Add the DD_AGENT_HOST to the env of your php app
Within the app you want for the traces to happen you’ll need to set the DD_AGENT_HOST so that the trace is able to emit the traces from the pod to the APM:
Like so:
env:
- name: DD_AGENT_HOST
valueFrom:
fieldRef:
fieldPath: status.hostIP
imagePullPolicy: Always
See example: https://github.com/jjcallis/datadog/blob/main/example%20php%20app%20manifest
End result APM enabled on Datadog :)