Multiple Kubeconfigs? No problem!
Alex Guedes
Alex Guedes

Jun 17, 2020·4 min read




Are you managing multiple Kubernetes clusters and find impossible to make sense of the multiple contexts part of your kubeconfig file? Don’t worry, you’re not alone!

I’m a Solutions Engineer at VMware Tanzu which is the Modern Application Platform business unit and we’re all about how you Build, Run and Manage modern workloads with Kubernetes at the core of everything we do. When you work in pre-sales like me and have to spin multiple Kubernetes up and down for proof of concepts, out of the sudden you realise your kubeconfig file looks like a mess and you can’t figure out which cluster is what (or which ones haven’t been destroyed yet).
I’m going to cover two tricks I have found out to be very useful to me when managing multiple Kubernetes clusters and multiple configuration files. How to access multiple Kubernetes clusters using multiple kubeconfig files and how to easily switch between Kubernetes contexts.
I’ll start with managing multiple contexts and config files. The Kubernetes documentation describes it quite well how to do this:
Configure Access to Multiple Clusters
This page shows how to configure access to multiple clusters by using configuration files. After your clusters, users…
kubernetes.io

But the problem I see with this approach is that not always you’ll configure your kubeconfig files that way. Several systems out there it will give you the option to download the configuration to access the cluster and while you can just append this to your existing kubeconfig file, this very quickly will get messy.
One example of that is Tanzu Mission Control, which allows you to provision and manage the lifecycle of multiple Kubernetes clusters across your VMware estate and across multiple clouds. This will not only allow you to download your kubeconfig file, but will also allow you to have visibility of your multiple Kubernetes clusters, their workloads and will also give you the ability to define policies like network and security.
I much rather have multiple kubeconfig files, one for each cluster I’m managing and name those files with some information that tells me which cluster the file belongs to. This is easily achieved by using kubeconfig --kubeconfig=/path/to/my/kubeconfig/file/cluster1. But that is not a great solution for me since it’s time-consuming having to pass your configuration every time you want to check which pods are running on a cluster.
What I have done to simplify having multiple kubeconfig files was to use a cool capability of the $KUBECONFIG environment variable, which allows us to specify multiple kubeconfig files separated by using colons. It should look like that when you have multiple config files:
$KUBECONFIG=/Users/aguedes/.kube/contexts/kubeconfig-cluster-1.yml:/Users/aguedes/.kube/contexts/kubeconfig-cluster-2.yml
This will allow me to switch between the cluster-1 and cluster-2 contexts using kubectl config use-context cluster-1for example.
This solves my problem of allowing me to have multiple config files, but still fairly manual since every time I restart my terminal or if I have a new kubeconfig (or I have to remove an old one) I have to set that environment variable again. For that, I use a very simple bash script that scans the directory for new files and automatically adds them to the $KUBECONFIG environment variable:
#!/usr/bin/env bash
# If there's already a kubeconfig file in ~/.kube/config it will import that too and all the contexts
DEFAULT_KUBECONFIG_FILE="$HOME/.kube/config"
if test -f "${DEFAULT_KUBECONFIG_FILE}"
then
  export KUBECONFIG="$DEFAULT_KUBECONFIG_FILE"
fi
# Your additional kubeconfig files should be inside ~/.kube/config-files
ADD_KUBECONFIG_FILES="$HOME/.kube/config-files"
mkdir -p "${ADD_KUBECONFIG_FILES}"
OIFS="$IFS"
IFS=$'\n'
for kubeconfigFile in `find "${ADD_KUBECONFIG_FILES}" -type f -name "*.yml" -o -name "*.yaml"`
do
    export KUBECONFIG="$kubeconfigFile:$KUBECONFIG"
done
IFS="$OIFS"
Then you can source that script by typing source load-k8s-configs.sh on your Mac terminal and that will load all your kubeconfig files as part of your $KUBECONFIG environment variable.
If you want to have this loaded every time you open the terminal, you can add source /path/to/script/load-k8s-config.sh to your bash_profile file inside your home directory.
With that, you should be able to switch between contexts with ease, but we have one more problem!
The filename you give to your config files are not necessarily the name of the context and you still need to know that by remembering the multiple parameters of the kubectl configcommand or by checking the multiple config files you have. That’s a hassle we don’t want, do we?
That’s where kubectx and the second trick comes into play! It allows you to easily check all available contexts and switch between them by typing kubectx context-name and that’s it! It also comes with some other tools around switching between namespaces and an interactive mode if you like that type of stuff. Check the Git repository out: https://github.com/ahmetb/kubectx.
You can install it using krew:
kubectl krew install ctx
kubectl krew install ns
Or you can find instructions on the GitHub repository on how to install using other methods like Homebrew for Macs. Once installed, you can start switching! (I stole the gif from the kubectx GitHub repository)

For more details about Tanzu Mission Control and the VMware Tanzu Portfolio, please check on VMware’s website.
VMware Tanzu Portfolio
Modernize your applications and infrastructure to deliver better software to production, continuously.
tanzu.vmware.com

Happy config switching to you all! If you have any questions, please reach out!