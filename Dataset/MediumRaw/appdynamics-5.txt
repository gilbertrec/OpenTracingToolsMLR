Configuring AppDynamics Through Code using Terraform
Harry Martland
Harry Martland
Follow
Aug 17, 2020 · 4 min read





As easy as it is to change configuration in User Interfaces maintaining this over a long time becomes a hassle. This is especially true if you are looking after configuration for multiple environments and applications. In this article, we look at a new Terraform provider for AppDynamics to get around this issue using configuration as code.

Why Configuration as Code
The ‘as code’ practice has been thrown around a lot recently. You may recognise it in infrastructure as code which is often used to build applications on AWS. Ther are various tools used for this such as Terraform, CDK, CloudFormation and Puppet to name a few. We will be using Terraform later on, an introduction to this can be found here.
The alternative to this practice is to manually create and change things. This could be running commands on servers or changing things in user interfaces (UIs). This makes reproducing things hard as you have to remember and manually apply the changes.
By defining our config as code we get the benefit of being able to reuse it. If we apply good programming techniques we can modularise it and use it in many places. Some examples of this are using the same configuration in pre-production and production environments and sharing common configuration between similar applications.
Configuration as code allows us to keep our configuration close to the related codebase. This makes it easy to find and edit but also allows people to easily view the configuration without having to log into third-party applications. The config can also be checked into version control allowing it to change with the application and also have audit and collaboration tools. If your company is SOX compliant this could be used as a control.
What is AppDynamics
AppDynamics (AppD) is an Application Performance Monitoring (APM) tool. It instruments your applications so you can see how the internals are working. This in includes database queries, HTTP requests and more. It provides you with various metrics such as latency, requests and errors to give you confidence things are working as expected. Alerts can be set up to notify you when things are not working as expected for someone to intervene and fix.
One of AppDynamics key selling points is autoconfiguration. In reality, teams generally need to manually configure their applications, especially if it is a rest application with ids in the path. To configure applications teams would have to use the UI provided by AppD and have to make this configuration in every environment.
Show me the code!
To configure AppDyanmics using code, a Terraform AppDynamics provider has been made. This can be found in the Terraform community registry and GitHub. Below is an example Terraform file which configures a restful endpoint with transactions and sets up an alert. The example makes use of the new provider syntax in version 0.13 allowing easy integration of community providers. Documentation for the AppDynamics provider can be found here.

That's a fair bit of code, lets break it down. The first 27 lines are defining variables so we can reuse them later on. Don’t worry all the values in this file are fake. If you were running this in a pipeline the values for the variables would be passed in. See the documentation for assigning variables for more information.
The first main configuration block starts at line 29, this creates a transaction detection rule which tells AppDynamics how to group requests together. In this example, we are using regex to group the restful user endpoint together which ends with an id. By default, AppD would create a new transaction for each user id.
The next block starting at line 42 creates a health rule. This rule checks all business transactions in an application and compares them to a baseline. Health rules are used to define what is healthy for an application.
An action is defined starting at line 56, when an action is triggered it performs something. In this case, it sends an email to a list of addresses.
Lastly starting at line 65 a policy is defined. This connects health rules and actions together. When the health rule changes the action is triggered. Notice how we can reference attributes from the health rule and action so if they change the policy is automatically updated. In this example, the policy is looking at all the health rules in the application and triggering the previously set up action. Due to how the AppDynamics API works for an email action we have to use the list of emails as the action name.
Future Config
The terraform provider is currently limited to single metric health rules. This is mainly to reduce the complexity of the initial release but also as having multiple metrics in one rule could be an anti-pattern. Should they not be separate rules?
There are some resources which have not been implemented yet such as Scopes and Action Suppression. These can still be created in the UI until they are included in a future release.
If you do need a feature which is missing in the provider please raise an issue on GitHub or vote if one already exists. Issues with more users will be prioritised and as with all good open-source software, pull requests are welcome.
I hope this Terraform provider can help you keep your engineering practices intact by providing a config as code solution for AppDynamics. Please feel free to raise a GitHub issue if you have any issues or suggestions.