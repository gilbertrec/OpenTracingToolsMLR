Avoid undesirable trace instances when scraping Prometheus metrics in Istio
Gary Brown
Gary Brown
Follow
May 11, 2018 · 3 min read





Update: As of Istio 1.0.0, prometheus scrape requests are automatically excluded from tracing.
Hopefully most people now understand the benefits that distributed tracing can provide when diagnosing issues in a distributed (e.g. microservices based) application.

Istio has now made it very easy to benefit from distributed tracing, by providing most of the capabilities as part of the infrastructure, with applications only having to take responsibility for propagating the trace context to any outbound requests.
However, if we also want to capture application metrics from our services using Prometheus, we find that Istio will unfortunately record trace instances each time Prometheus scrapes metrics from our services. This can add up to a large number of unnecessary trace instances.
For example, after installing a couple of services on Istio, configured with both Jaeger and Prometheus, we find a series of trace instances being recorded before even any real “business” invocation of the service has been performed:

If we look at the details for one of these trace instances we see that it has been created as the result of a request to the /metrics endpoint:

Although the OpenTracing framework instrumentations can be configured to ignore requests to certain endpoints, such as in the case of java-spring-web used by my example services, it is currently not possible to configure the Istio proxy to ignore tracing on specific endpoints.
This post will show a quick way to disable trace instances resulting from Prometheus scrape requests.
The first step is to deploy a NGINX proxy that will add a specific header to the scrape request. The header is “X-B3-Sampled: 0”, and will instruct the tracer used within the Istio proxy not to sample this request. Unfortunately Prometheus does not provide a mechanism for adding such a header to the scrape request, so instead we use the NGINX proxy.

This can be deployed using the following command:
kubectl create -f prometheus-nginx.yml -n istio-system
The second step is to update the Prometheus scrape configuration(s) to use the NGINX proxy. If using the ‘addon’ Prometheus template provided by Istio, this would involve adding the proxy_url property in the following two locations:
    # scrape config for service endpoints.
    - job_name: 'kubernetes-service-endpoints'
      proxy_url: 'http://prometheus-nginx:9191'

    ...

    # Example scrape config for pods
    - job_name: 'kubernetes-pods'
      proxy_url: 'http://prometheus-nginx:9191'

    ...
Once these changes are deployed, the only traces reported for the example services will now be the real invocation of the services:

with the details of this trace instance being shown in the first image of the blog post.
Hopefully a more general solution will be provided in Istio in the near future, to enable specific endpoints to be excluded from tracing. But until that time, this provides a short term solution to minimise the unnecessary tracing data being generated by the Istio service mesh.