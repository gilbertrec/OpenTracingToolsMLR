DataDogAPM with OpenCensus
kengo suenaga
kengo suenaga

Feb 2, 2020·3 min read





DataDog APM is fully managed tracing service. DataDog APM support OpenCensus as trace format. so I challenged use DataDog APM with OpenCensus.
# Setup
In distribution tracing, trace sender layer called exporter exists. so I select DataDog exporter to use DataDog APM.
let’s setup DataDog exporter. I use Golang in this time.
package main

import (
   "log"

  "github.com/DataDog/opencensus-go-exporter-datadog"
  "go.opencensus.io/trace"
)

func main() {
   opt := datadog.Options{
      Service:   "your service name",
      TraceAddr: "your datadog agent_ip:8126",
   }

   dd, err := datadog.NewExporter(opt)
   if err != nil {
      log.Fatal(err)
   }

   defer dd.Stop()

   trace.RegisterExporter(dd)
   trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})
}
# Start Trace
for example tracing, I prepared do function. I start tracing in function.
func do() {
   ctx := context.Background()
   ctx, span := trace.StartSpan(ctx, "sleeping...")
   defer span.End()

   time.Sleep(10 * time.Second)
}
call do func in main func.
func main() {
   opt := datadog.Options{
      Service:   "your_service_name",
      TraceAddr: "your_datadog_agent_ip:8126",
   }

   dd, err := datadog.NewExporter(opt)
   if err != nil {
      log.Fatal(err)
   }

   defer dd.Stop()

   trace.RegisterExporter(dd)
   trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})

   for {
      do() // <- here
   }
}
this is ok for tracing, next I connect log and trace.
# Connect Log and Trace
set up logger. look blew.
package logger

import (
   "context"
   "encoding/binary"
   "fmt"

   "go.opencensus.io/trace"

   "go.uber.org/zap"
   "go.uber.org/zap/zapcore"
)

//Logger is singleton instance.
var Logger *logger

type logger struct {
   logger *zap.Logger
}

func init() {
   cfg := zap.Config{
      Level:       zap.NewAtomicLevelAt(zap.InfoLevel),
      Development: false,
      Sampling: &zap.SamplingConfig{
         Initial:    100,
         Thereafter: 100,
      },
      Encoding: "json",
      EncoderConfig: zapcore.EncoderConfig{
         TimeKey:     "ts",
         LevelKey:    "level",
         MessageKey:  "msg",
         LineEnding:  zapcore.DefaultLineEnding,
         EncodeLevel: zapcore.CapitalLevelEncoder,
         EncodeTime:  zapcore.ISO8601TimeEncoder,
      },
      OutputPaths:      []string{"stdout"},
      ErrorOutputPaths: []string{"stdout"},
   }

   zapLogger, err := cfg.Build()
   if err != nil {
      panic(fmt.Errorf("init logger err: %w", err))
   }

   Logger = &logger{zapLogger}
}

//Info output log with INFO severity.
func (l *logger) Info(ctx context.Context, msg string, fields ...zap.Field) {
   spanCTX := trace.FromContext(ctx).SpanContext()
   fields = append(
      fields,
      zap.Uint64("dd.trace_id", binary.BigEndian.Uint64(spanCTX.TraceID[8:])),
      zap.Uint64("dd.span_id", binary.BigEndian.Uint64(spanCTX.SpanID[:])),
   )
   l.logger.Info(msg, fields...)
}
follow program is point for connecting log and trace.
spanCTX := trace.FromContext(ctx).SpanContext()
   fields = append(
      fields,
      zap.Uint64("dd.trace_id", binary.BigEndian.Uint64(spanCTX.TraceID[8:])),
      zap.Uint64("dd.span_id", binary.BigEndian.Uint64(spanCTX.SpanID[:])),
   )
   l.logger.Error(msg, fields...)
I add dd.trace_id and dd.span_id to log field. dd.trace_id and dd.span_id is automatically tagged in datadog.
you can check dd.trace_id and dd.span_id in follows document.
Connect Logs and Traces
If you prefer to manually correlate your traces with your logs, leverage the Datadog API to retrieve correlation…
docs.datadoghq.com

binary.BigEndian.Uint64(spanCTX.TraceID[8:]))
this process that encoding trace_id refer to github.com/DataDog/opencensusu-go-exporter-datadog/span.go .
https://github.com/DataDog/opencensus-go-exporter-datadog/blob/master/span.go
func (e *traceExporter) convertSpan(s *trace.SpanData) *ddSpan {
    startNano := s.StartTime.UnixNano()
    span := &ddSpan{
        TraceID:  binary.BigEndian.Uint64(s.SpanContext.TraceID[8:]),
        SpanID:   binary.BigEndian.Uint64(s.SpanContext.SpanID[:]),
        Name:     "opencensus",
        Resource: s.Name,
        Service:  e.opts.Service,
        Start:    startNano,
        Duration: s.EndTime.UnixNano() - startNano,
        Metrics:  map[string]float64{},
        Meta:     map[string]string{},
    }
        //omit
}
complete log setup. so insert logging to do function.
func do() {
   ctx := context.Background()
   ctx, span := trace.StartSpan(ctx, "sleeping...")
   defer span.End()

   logger.Logger.Info(ctx, "hello world") //<- here
   time.Sleep(10 * time.Second)
}
# Conclusion
if connecting trace and log, your debugging process become very easy. it is not hard to setup. so lets use DataDogAPM with OpenCensus!