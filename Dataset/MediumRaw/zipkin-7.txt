Distributed Tracing of Spring boot microservices with zipkin part-2
IndraJagadeesh
IndraJagadeesh

Aug 23, 2020·3 min read




Hi, This is a continuation of part-1, Where we have seen the development and running the distributed springboot microservices using docker and docker-compose. If you haven’t read that, I recommend to please go through it once. As we discussed earlier, Now we will see zipkin integration and monitoring the trace.

Photo by Anastasia Dulgier on Unsplash
To understand the integration part, we need to see the docker-compose file again and observe the environment variables closely:

Spring boot will first check for environment variables, then for application properties and then it will use the default values. As we are setting environment variables through docker-compose, this values will be picked. Simple example to convert application.properties to environment variables
eg:
    application.properties        environment variable
      custom.next-call             CUSTOM_NEXT_CALL
    spring.application.name      SPRING_APPLICATION_NAME
I will quickly go through all environment variables, to get a better understanding and also recommend to see the code to understand its functionality code.
Custom propertices:
CUSTOM_NEXT_CALL : type boolean -> flag used to calls other microservices.
CUSTOM_URLS: type String Array -> list of other microservies endpoint.
CUSTOM_DELAY: type long -> custom delay time.
CUSTOM_DELAY_METHOD: type boolean -> flag used to call delay method.
CUSTOM_MESSAGE: type String -> microservice response message.
CUSTOM_HTTP_STATUS_SUCCESS: type boolean -> flag used to set http status code either 200(ok) or 500(internal server error).
Spring propertices:
SPRING_APPLICATION_NAME: to set application name.
SPRING_ZIPKIN_ENABLED: to enable trace posts to zipkin server.
SPRING_ZIPKIN_BASE_URL: to set zipkin base url.
to get more spring cloud sleuth properties click here.
As we got a good understanding with the docker-compose file, Now I will quickly run the docker-compose file and show you the trace and telemetry we can get through Zipkin.
To start the docker-compose run the following command
docker-compose up
wait until all services are up as shown below:

Now hit the client-module service with the url: http://localhost:9900/module and wait for the response as show below:

As we can see the response, there are some modules with default message, some with custom message and some with error message, So let’s open zipkin and see the trace and connection of the request we did. Open http://localhost:9411/zipkin/

Click on the trace to analize time distribution between the modules

Here we can clearly observe the time taken by each module to serve the request, and also failed request in red color. Let’s analyze module connection and identify the failed requests.

With this, we can easily identify the request flow through the distributed microservices, see the requests in-coming in and out-going, analyze latency and success rate.
Hope you learn some thing, Thanks for your time.
Github link : https://github.com/indrajagadeesh/SpringBoot-distributed-tracing-with-zipkin