Datadog and F5, a match made in heaven?
jon
jon

Jul 17, 2020·6 min read




The result of a hackday, this post focuses on leveraging native F5 LTM and Nginx logs functionality to gain visibility into the latency breakdown of individual requests.

(Super) High level flow diagram
Datadog is a popular observability platform for your entire (cloud native) tech stack, F5 is a powerful gateway to many critical on-premise workloads. Nginx is a very popular open source web server and proxy.
What happens when you have all 3 in your environment? Can we get everything to play nicely together with minimum effort (no sweat or iRules)?
There are many ways to monitor F5 BIG-IP. You could procure BIG-IQ or Beacon or use some combination of SNMP or Telemetry Streaming.
However, to follow this post, you just need access to:
F5 LTM
Datadog SaaS account (go ahead and create a free trial, it should take no more than 5mins)
https://www.datadoghq.com/free-datadog-trial/
Centralized logging setup or a t2.micro EC2 instance to deploy rsyslog
Aim:
Send HTTP access logs from both the LTM and backend Nginx instance to Datadog. This should include response processing time on each tier (F5 and Nginx) so we can tell where any latency occurred.
Parse the logs to allow us to tease out aggregated views and maybe even drill down to individual requests.
Step1: Setup rsyslog
Skip this step if you already have centralized logging setup (eg. fluentd or syslog-ng) and instead follow the documentation below
https://docs.datadoghq.com/logs/log_collection/
Here we use rsyslog as a lightweight centralized logger to send relevant logs over to Datadog.
Rsyslog is really convenient as it comes preinstalled on most linux images.
Not much configuration needed here since Datadog accepts logs in any format. If you are starting from scratch on AWS, just spin up a t2.micro with Amazon Linux and follow the instructions below. You will need access to a Datadog API key to complete this.
https://docs.datadoghq.com/integrations/rsyslog/
Here is what we used to capture the relevant LTM logs in our rsyslog.conf:
$template messages, “/var/log/%fromhost-ip%/messages”
*.info;mail.none;authpriv.none;cron.none;local7.none;local6.none ?messages
Correspondingly, in /etc/rsyslog.d/datadog.conf plug in the following values (in addition to what is stated in the docs):
File=“/var/log/{f5-ip}/messages”
[metas ddsource=\"f5\"]
Step2: Setup F5 Request Logging
In this step, we assume that your F5 virtual server is already up and humming. Next, you create a LTM pool pointing to your rsyslog server which you will need in for the “Pool Name” field in your request logging profile.
Following this, we create the actual request logging profile (its hidden quite deep in the menus)

Configure the Response logging section (Request logging lacks the logging data we need). Details of the format of the cryptic looking Template string below are in the link below.
https://techdocs.f5.com/en-us/bigip-14-0-0/external-monitoring-of-big-ip-systems-implementations-14-0-0/configuring-request-logging.html

Once the request logging profile is created, attach it to the virtual server you wish to log traffic from. Look under the main virtual server config, change the dropdown from basic to advanced, and then look for the field Request Logging Profile (yes its well hidden, almost like an easter egg)

Jul 17 06:11:08 JRESPONSE xx.xx.xx.xx /Common/VS1 req=GET / HTTP/1.1 hrc=200 4174 1575 cookie=_dd_s=rum=1&id={sessionId}&created=yyy&expire=zzz
At this point, you should see logs of the format above hitting your rsyslog server each time you access your virtual server. If you get 1 log per request, you are making good progress!
Step3: Generate Nginx Access logs
For F5, we have to use an agentless collection method. For Nginx, you also have the option to use the agent-based method which is both easier and more powerful.
In addition to logs, the agent will also collect a bunch of insightful Nginx health metrics and provide an OOTB dashboard. Feel free to explore these on your own.

Now, install the Datadog Agent on the Nginx host and follow instructions here to configure logging.
https://docs.datadoghq.com/integrations/nginx/
We cheated a bit here and bypassed rsyslog as the agent can send logs directly to Datadog. Here is the nginx.conf access log format and sample log line. See how easy it is to get request_time? Its 0.885 sec in the sample log below.

nginx.conf log format
10.0.0.208 - - [17/Jul/2020:06:11:07 +0000] "GET / HTTP/1.1" 200 4174 0.885 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.0.0 Safari/123" "-" "_dd_s=rum=1&id={sessionID}&created=xxx&expire=yyy" "1.2.3.4"
Step4: Jump into Datadog
Now for the fun part! We need to parse the logs that are ingested into Datadog. Default Nginx logs are supported out-of-the-box but this needs to be modified to parse the new cookie header we added to the access logs.

Modified Nginx Parser
Clone the default Nginx pipeline and add the additional rules below access.combined to handle the additional cookie attributes.
Next, we create a parsing pipeline for the custom F5 LTM request logs.

F5 Parser
Create a new pipeline for F5, filter to the ddsource we defined in step1, then use the auto-grok parser or the rule below.

Step5: Connecting the dots
Lastly, you need a way to connect the logs for each request together.
You could do this by writing iRules to generate headers with a random ID on your LTM. But let’s assume we are not familiar with iRules, so here we take a shortcut by simply use Datadog RUM (Real User Monitoring).
https://docs.datadoghq.com/real_user_monitoring/installation/
One quick way to implement this is to just paste the provided code snippet into your html code <head> block.

Besides being a pretty cool solution on its own with DNS and resource level breakdown of frontend latency, we now can repurpose the RUM injected cookie header which has a unique session_id!
Once Datadog RUM is setup, go into one of the captured F5 LTM logs in Datadog and create a facet for cookie.id (unique ID) and a measure for duration_ms (attribute that denotes latency in both F5 and Nginx)

cookie.id facet

duration_ms measure
Now you can generate some traffic and visualize the latency breakdown of your incoming requests!

Filter by session ID

Visualization of latency breakdown
You can also slice and dice by URL path, user-agent, and any other attribute that catches your eye.
Summary
Turns out with just a basic F5 BIG-IP LTM and a Datadog free trial (or ongoing logs+RUM subscription), you can get this setup in 2–3 hours. Definitely worth your time.
Thanks to Shigeya-san who worked on this with me and my friends from F5 who inspired and helped this project materialize.