Using Jaeger Cpp Client for Distributed Tracing in Ceph
Deepika Upadhyay
Deepika Upadhyay

Jul 4, 2019·5 min read




If you are not already familiar with Jaeger and Opentracing, you can read about it here.
Jaeger + Opentracing provides ready to use tracing services for distributed systems and is becoming widely used, de facto standard because of their simplicity and standardization.
Jaeger, the backend provided to the Opentracing API is responsible for the collection of spans, these spans are made with use of smart pointers that carry the timestamp, TraceID and other meta info like a specific tag/log associated with the span to uniquely identify it across the distributed system.
let’s get intuitive using Jaeger-client-cpp
I would suggest going through the excellent walkthrough of the HOTROD application before we begin …
Okay, you are back! Let’s get started!
To make use of Jaeger, follow the README.md and test the spans build in the example app. You’ll get to see two spans, by following the example App.cpp.
INFO: Initializing logging reporter
INFO: Reporting span 5b163b107a813958:a0e81b958c00c461:5b163b107a813958:1
INFO: Reporting span 5b163b107a813958:5b163b107a813958:0:1
The first INFO line specifies, that we have the reporting service enabled and hence the spans would be reported locally when you run your traced application. The second and third INFO are actually the spans generated.
These spans can be seen in the Jaeger UI(you have to first initialize UI before running the traced code to see spans).
Use their all-in-one docker image(you will need docker installed for that, head here if you don’t already have docker) for hassle-free UI setup.
How traced spans looks on Jaeger UI.

Show me what Opentracing API along with Jaeger is capable of!
For that, you can refer tutorial-example-cpp that illustrates the use of Opentracing API. I can give a brief overview on it.
Configuring Jaeger
Jaeger comes with an option of setting up the tracing system according to the requirement. By this, I mean you can customize capturing spans based on your need.
You can set if you want to enable logging, set the frequency of recorded spans by using samplers provided by Jaeger, do you want to persist those spans like for maybe billing you want to record the time spent on a service using tracing, for instance, if it’s a microservice like Netflix and you want to collect and store all the timestamp that spans carry so as to bill your customers you can forward your spans to database storage units.
Configuration options for jaeger -client-cpp can be passed in the form of YAML file. An example of which can be seen here.
Setup the Tracer
To employ tracing to your code first step is to choose a Tracer backend compatible with Opentracing API, you can find available ones here.
We are going to use Jaeger and hence will replace mocktracer, with Jaeger specific initialization, and pass the config.yml file location for our customized configuration, after which our job with Jaeger is done!
From there Opentracing API is used to configure and add traces which are then collected by Jaeger backend and sent to Jaeger UI. Replace the mocktracer with Jaeger and we are good to go. You can make use of this code.
void setUpTracer(const char* serviceToTrace) {  
auto configYAML = YAML::LoadFile("config file location"); 
auto config = jaegertracing::Config::parse(configYAML); 
tracer = jaegertracing::Tracer::make(serviceToTrace, config, jaegertracing::logging::consoleLogger()); 
opentracing::Tracer::InitGlobal(      std::static_pointer_cast<opentracing::Tracer>(tracer));
}
Parent, Child and Follow-up spans:
After we had setup the Tracer we should start creating spans to trace our application, for that taking inspiration from Jaeger-client-cpp example I have added a function that converts the context passed as a string to a span, this method returns a span which can be stored and passed to create subroutine context.
The parent span so obtained from tracedFunction() method is then used to pass into tracedSubroutine() function along with subroutine context, which creates child span.
Note: there can be only one active parent span in scope, either the span finish when the scope ends or you can use SpanName->Finish () method to destroy it explicitly.
Tags and Logs:
The purpose of tracing is to give as much meaningful contextual information in an easy to comprehend form; as Google developers describe it as making things observable.
We can add more context to our tracepoint using Tags and Logs, refer docs knowing more about them.
Span Context propagation by Inject and Extract methods:
Since we are working on distributed systems, with many remote machines coordinating with each other concurrently exchanging data, messages, updates; it becomes important to trace these subparts of the system as much as the core system itself.
Thus, Opentracing and Jaeger also supports off the wire context transfer, by which we mean the span context is gathered using the Inject method, the string so returned will be carrying the span context and hence the uniqueness of a span, which can then be transmitted and reproduced back to a span ready for tracking at the remote system, if Tracer is already not active initiate it at remote end and the use extract method to reconstruct the span.
Voila! And the span’s reconstructed back!
Marking those first traces and making it more intuitive to add traces.
After a few hiccups with the use of unique pointers and adding jaeger libraries locally. I can now build Ceph with Jaeger!
I tested adding the initial span; in OSD input-output path(a part of Ceph) and after a bit tussle understanding how to make it work, I can now see the traced path by adding just 1 span! No wonder it would be great to design useful tracepoints that can hopefully reform the way debugging is done in distributed systems like Ceph.
let me show you how those spans turn out for Ceph Object Storage Deamon(the one who manages and stores objects in Ceph cluster)

Final Words
The traces marked acts as a proof of concept that Jaeger can be employed efficiently in large distributed projects like Ceph.
My future challenge lies in providing meaning to this powerful tool, by designing the best outline for adding tracepoints, which requires a thorough understanding of Ceph, which is where I am beginning from. Yet there will always lie the need for tracing for new code or some suspicious code at unfamiliar places, keeping all that in mind, I have abstracted Opentracing API in easy to use functions that can by anyone so that developers have to facility to add new traces themselves easily.
Making this system more decentralized along with a strong foundation of meaningful and general tracepoints, is where I want to bring this project to.
Let’s see what lies ahead!