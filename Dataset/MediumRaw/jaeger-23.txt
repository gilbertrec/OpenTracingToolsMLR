Introduction to Jaeger : Distributed Tracing On Kubernetes
Naman Gupta
Naman Gupta
Follow
May 25, 2020 · 4 min read






OPENTRACING (Distributed Tracing)
Before starting about Jaeger, Let’s go around OpenTracing technique and how to use it in micro-services environment with tools like Jaeger.
In micro-services architecture, many applications communicating with each other than ever before. While application performance monitoring is great for debugging inside a single app, as a system expands into multiple services, how can you understand , how much time each service is taking, where the exception happens, and the overall health of your system? In particular, how do you measure network latency between services — such as how long a request takes between one app to another?
To deal with all these problems and scenarios, Distributed Tracing comes into the picture,
“Distributed tracing is the art and science of making distributed traces valuable.”
Distributed tracing is a method used to tracking and monitoring the applications mostly built using micro-services architecture. It helps in finding where failures occur and what causes poor performance.

The Major Components that plays a crucial role in distributing Tracing are:-
Trace: A recording of a transaction as it moves through a distributed system.
Span: A named, timed operation representing a piece of the workflow. Spans have a timestamp, duration, and are annotated with tags and logs.
To Show Distributed Tracing in Action, we will be using Jaeger as our Tracer Implementation.
JAEGER: A Distributed Tracing System
Jaeger is one of the major tool which is used for Distributed Tracing System, it will monitor, troubleshoot and analyse micro-services base applications using tracing system.
Following is the architectural flow for Jaeger, with all components of jaeger and how these components work together in pipeline to show end result in UI.

Jaeger Deployment steps in Kubernetes for Micro-services Applications :-
Before Starting deployment of Jaeger in Kubernetes, It is important to configure Jaeger-Client libraries in Application with other libraries of Application, so that it will be easier for other components of Jaeger to fetch the application data for tracing.
Jaeger Tracing can be compatible with languages like Go,Python,Java,Node and C++.
Lets Start with Deployment stages with each components:-
Jaeger-Agent
Jaegar-Agent is a Daemon that fetches workflow from Jaegar-Client present in Application via UDP network and sent it to Jaeger Collector.
It can be deployed using two ways i.e Daemonset and Sidecar.
In our case we used Sidecar format for Jaeger Agent which will run as a sidecar container in same application pod and fetches application details using UDP network.
This is example application running with sidecar as jaegar-agent.

2. Jaeger-Collector
Jaeger Collector Collects the traces coming from Jaeger agent in form of batches and pass it over to storage.
It is collector only which validates the traces and pass it to storage using pipeline.

3. Jaeger Query
Jaeger query is responsible for fetching traces from storage and helps in showing traces on UI. Jaeger us having its own UI for monitoring tracing but we can integrate other tool as well like ELK etc.
Here in our case we had used Default UI of Jaeger.

4. Jaeger-Storage
Jaegar-Storage stores the validated traces coming in pipeline from collector section.As of now Jaeger using two Storage types:-
(i). Elastic Storage
(ii) Cassandra Storage
In our case we are using Cassandra as storage , which will be mount to jaegar-collector for fetching traces and jaegar-query for pushing traces to show on UI.
Here Below given is service file ,Stateful-set file

Common configuration required for storage with some components are as below:-
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
data:
  span-storage-type: cassandra
  collector: |
    collector:
      zipkin:
        http-port: 9411
    cassandra:
      servers: cassandra
      keyspace: jaeger_v1_dc1
  query: |
    cassandra:
      servers: cassandra
      keyspace: jaeger_v1_dc1
  agent: |
    collector:
      host-port: "jaeger-collector:14267"
Validation Of Jaegar Deployment with Application
These are running deployment for all components of jaegar with cassandra Storage.

In our case, Below given service endpoint is with type as “LoadBalancer” for application such ordermgr and jaegar-query.
we can deploy it using ingress as well with DNS hosted zone.


The UI Part Of Jaegar with some tracing output for GET request is as follows :-