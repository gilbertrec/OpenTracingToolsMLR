How to use Datadog for monitoring and logging NodeJS on Heroku
Charles Markovich
Charles Markovich

Jan 30·4 min read




As I was recently finishing up a NodeJS application running on Heroku, I finally bit the bullet and figured out how to use DataDog for monitoring and logging the service.
There are a lot of great articles and NPM packages out there to help, but for the sake of simplicity, I will only discuss the basics to get started with the essentials.
Setup Monitoring
The first we’ll do is to install a Datadog Agent on our Heroku application so that Datadog can begin collecting the necessary metrics we need for setting up our dashboards.
Inside Datadog, navigate to Integrations > Heroku

Now the steps are listed on the page, however you may need to slightly modify them in order to work. I will describe the same commands along with the changes I had to make in order to make them work properly.
Step 1. Enable Heroku Labs Dyno Metadata
Assuming you already have a project setup and the NodeJS buildpack installed, we can start by enabling the metadata. This step will ensure that the Heroku Dyno will have access to the metadata about the app and environment to share with Datadog.
It’s important to add the -a followed by your app name in Heroku that you would like to setup with Datadog.
$ heroku labs:enable runtime-dyno-metadata -a <app-name>
Step 2. Add the Datadog Heroku buildpack
$ heroku buildpacks:add https://github.com/DataDog/heroku-buildpack-datadog.git -a <app-name>
Step 3. Set the Agent version to install
$ heroku config:add DD_AGENT_MAJOR_VERSION=7 -a <app-name>
Step 4. Set your Datadog API key
$ heroku config:add DD_API_KEY=<datadog-api-key> -a <app-name>
Step 5. Set the Datadog site
$ heroku config:add DD_SITE=datadoghq.com -a <app-name>
Step 6. Deploy to Heroku
$ git push heroku master
Now we can see our metrics and setup any dashboards we like to monitor and track our Heroku Dyno performance. Here you can see how to see the new dashboard that Datadog automatically has setup for us.


At this point we can setup more metrics to capture manually within your app for greater clarity. One example is that we may want to track how long each function takes to execute in our code which we could easily do with a package like https://github.com/brightcove/hot-shots. Then in Datadog we could build dashboards from the metrics the app is sending.
However for the sake of simplicity this article is just to get us up and running with the basics in place.
Congrats! The hardest part is over and now we’re on to setting up our logging in Datadog.
Setup Logging
Now the last part we would like to do is to setup the logging that occurs in our application to send the messages over to Datadog so that we can use the UI to quickly search, find, and live tail all the events occurring in the application.
The important is to provide a valid name for the service, I used the app name again in this case as recommended by Heroku. I used the domain name for the host.
$ heroku drains:add 'https://http-intake.logs.datadoghq.com/v1/input/<datadog-api-key>?ddsource=heroku&service=<service>&host=<host>' -a <app-name>
If everything correctly you should see a confirmation output similar to the following:
Successfully added drain https://http-intake.logs.datadoghq.com...
Cheers now the logs are connected to Datadog! Let’s explore this a bit and show how the two systems work together.
First, I recommend using a dedicated logging package such as Winston to capture, format, and pass the logs along. The documentation can be found https://github.com/winstonjs/winston
With Winston or any other logger, we can simply write to the console and have the logs processed and sent to Datadog.
import winston from 'winston';
// Configure Winston
const logger = winston.createLogger({
  level: 'info',
  transports: [new winston.transports.Console()]
});
// Send a log
logger.info('Hello from Heroku NodeJS app!');
Now that we sent a log in our app, we can go into Datadog and find the messages showing up under ‘Logs’. Note that the host and service provided in the drain is the same as should show in Datadog.

Now go forth and prosper! The possibilities of monitoring your app are endless, but never the less crucial for ensuring critical issues are caught early. Good logs are worth their weight in gold as issues arise and you need to debug quickly.