OpenTracing using Jaeger with spring boot web application
krushnat Khavale
krushnat Khavale

Jul 25, 2020Â·4 min read





Photo by Josh Riemer on Unsplash
Before getting started with spring application letâ€™s look at what is Jaeger and no little bit about it.
Jaeger
Jaeger, inspired by Dapper and OpenZipkin, is a distributed tracing system released as open source by Uber Technologies. It is used for monitoring and troubleshooting microservices-based distributed systems, including:
Distributed context propagation
Distributed transaction monitoring
Root cause analysis
Service dependency analysis
Performance / latency optimization
Why Jaeger?
As on-the-ground microservice practitioners are quickly realizing, the majority of operational problems that arise when moving to a distributed architecture are ultimately grounded in two areas: networking and observability. It is simply an orders of magnitude larger problem to network and debug a set of intertwined distributed services versus a single monolithic application. more details.
Spring boot application using Jaeger
Now that you know little bit about Jaeger, letâ€™s understand what is application that we will be using for this tutorial. As Jaeger was built from day 1 to be able to process huge data and distributed applications, for this tutorial we need a distributed application. So I have created two microservices relay-service and sprint-service.
The architecture of the two microservices is as shown in the picture below

Microservices used in this tutorial
relay-service: This microservice is internet facing service so it can be called by using CURL, POSTMAN or any other rest/web client. Once called, it then starts a new relay process and calls sprint-service to execute sprints with relayId.
sprint-service: This microservice then creates 4 tasks for given relayId and executes them sequentially as it would happen in any relay race.
To use Jaeger with spring-boot below dependencies are used,
compile "io.opentracing.contrib:opentracing-spring-cloud-starter:0.1.13"
compile "io.jaegertracing:jaeger-client:0.31.0"
In relay-service, we are letting spring-boot take care of instrumentation so that the Tracing spans are automatically published. So the only configuration we have done in relay-service is,
@Bean
public io.opentracing.Tracer initTracer() {
        Configuration.SamplerConfiguration samplerConfig = new
               Configuration.SamplerConfiguration()
                .withType("const").withParam(1);
        return Configuration.fromEnv("relay-service")
                .withSampler(samplerConfig).getTracer();
}

@Bean
public RestTemplate restTemplate(
          RestTemplateBuilder restTemplateBuilder) {
        return restTemplateBuilder.build();
}
Here a Jaeger tracer is declared as bean and as you are in spring boot world (which is great at autowiring as you know ðŸ˜Ž), all necessary configuration is automatically done and Jaeger client will publish spans for all the HTTP methods that are executed.
In sprint-service however, we will not only configure Tracer bean as we did in relay-service but also we will publish spans using Jaeger client API. A span can be created using tracer object. The span recording will start with start method and will stop using finish method as shown below.
Span sprintSpan = tracer.buildSpan("sprint-" + count)
                .withTag("player", player).start();

doSomeRunning(player);

sprintSpan.finish();
Enough about coding, letâ€™s run both the microservices and see the goodness of Jaeger with spring boot. Here relay-service is configured to run on default port 8080 and sprint-service is configured to run on 8081. Once both the microservices are started the only thing left is starting Jaeger UI which runs on port 16686. There are multiple ways in which Jaeger and related tools are started, the easiest way is to start jaeger-all-in-one command. Here is the link to installations on different operating systems.
Jaeger in action:
Following are some of screenshots of Jaeger UI showing various stages.
Jaeger UI home before events

2. Letâ€™s hit http://localhost:8080/start-relay endpoint of relay-service see traces in Jaeger UI.

3. Detailed traces in Jaeger UI

4. Custom tags in spans

Additional Links
These additional references should also help you:
source code
jaeger-installation
opentracing-spring-jaeger-starter